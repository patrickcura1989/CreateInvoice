--  DDL for Table ASSETS
  CREATE TABLE "ASSETS" 
   (	"SCRIPTNAME" VARCHAR2(200 BYTE), 
	"SCRIPTLOCATION" VARCHAR2(800 BYTE), 
	"LIBFORMAT" VARCHAR2(800 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTCODE
  CREATE TABLE "COMPONENTCODE" 
   (	"LINEID" NUMBER(11,0), 
	"COMPID" NUMBER(11,0), 
	"KEYID" NUMBER(11,0), 
	"OBJID" NUMBER(11,0), 
	"CAPTION" VARCHAR2(1000 BYTE), 
	"LOGICALNAME" VARCHAR2(1000 BYTE), 
	"OPVARNAME" VARCHAR2(200 BYTE), 
	"ROWORDER" NUMBER(20,10), 
	"FUNCID" NUMBER(11,0), 
	"DEFAULTDATA" VARCHAR2(300 BYTE), 
	"IPPARAMCOUNT" NUMBER(11,0) DEFAULT 0, 
	"RERUNNABLE" NUMBER(1,0) DEFAULT 0, 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"VER" NUMBER DEFAULT 1, 
	"TOOLTIP" VARCHAR2(500 BYTE), 
	"MANDATORY" NUMBER(1,0) DEFAULT 0, 
	"PREVLINEID" NUMBER(11,0)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTCODE_ARCHIVE
  CREATE TABLE "COMPONENTCODE_ARCHIVE" 
   (	"LINEID" NUMBER(11,0), 
	"COMPID" NUMBER(11,0), 
	"KEYID" NUMBER(11,0), 
	"OBJID" NUMBER(11,0), 
	"CAPTION" VARCHAR2(200 BYTE), 
	"LOGICALNAME" VARCHAR2(200 BYTE), 
	"OPVARNAME" VARCHAR2(200 BYTE), 
	"ROWORDER" NUMBER(20,10), 
	"FUNCID" NUMBER(11,0), 
	"DEFAULTDATA" VARCHAR2(300 BYTE), 
	"IPPARAMCOUNT" NUMBER(11,0), 
	"RERUNNABLE" NUMBER(1,0), 
	"DELETED" NUMBER(1,0), 
	"VER" NUMBER, 
	"TOOLTIP" VARCHAR2(500 BYTE), 
	"MANDATORY" NUMBER(1,0), 
	"PREVLINEID" NUMBER(11,0)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTHISTORY
  CREATE TABLE "COMPONENTHISTORY" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(80 BYTE), 
	"ACTION" VARCHAR2(50 BYTE), 
	"PERFORMEDAT" TIMESTAMP (6), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"COMPID" NUMBER(11,0), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTS
  CREATE TABLE "COMPONENTS" 
   (	"COMPID" NUMBER(11,0), 
	"COMPNAME" VARCHAR2(150 BYTE), 
	"TAGS" VARCHAR2(1000 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE), 
	"LATESTVERSION" VARCHAR2(10 BYTE) DEFAULT 1, 
	"STATUS" VARCHAR2(25 BYTE) DEFAULT 'UnApproved', 
	"EXTENDIBLETIME" DATE, 
	"LOCKDESCRIPTION" VARCHAR2(500 BYTE), 
	"STORAGELOCATION" VARCHAR2(250 BYTE), 
	"STORAGEVERSION" VARCHAR2(25 BYTE), 
	"FETASSOCID" NUMBER(11,0), 
	"TEMPLOCATION" VARCHAR2(500 BYTE), 
	"AUTO" NUMBER(1,0), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"C_LOCK" NUMBER(1,0) DEFAULT 0, 
	"LOCKEDBY" VARCHAR2(80 BYTE), 
	"APPROVECOUNT" NUMBER(1,0) DEFAULT 0, 
	"COMPTYPE" VARCHAR2(50 BYTE) DEFAULT 'Internal'
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTSETHISTORY
  CREATE TABLE "COMPONENTSETHISTORY" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(80 BYTE), 
	"ACTION" VARCHAR2(50 BYTE), 
	"PERFORMEDAT" TIMESTAMP (6), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"COMPSETID" NUMBER(11,0), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTSETS
  CREATE TABLE "COMPONENTSETS" 
   (	"COMPSETID" NUMBER(11,0), 
	"COMPSETNAME" VARCHAR2(500 BYTE), 
	"TAGS" VARCHAR2(1000 BYTE), 
	"LATESTVERSION" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(25 BYTE), 
	"FETASSOCID" NUMBER(11,0), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"ORDERVAL" NUMBER(12,7), 
	"C_LOCK" NUMBER(1,0) DEFAULT 0, 
	"APPROVECOUNT" NUMBER(1,0) DEFAULT 0, 
	"LOCKEDBY" VARCHAR2(80 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPONENTS_ARCHIVE
  CREATE TABLE "COMPONENTS_ARCHIVE" 
   (	"COMPID" NUMBER(11,0), 
	"COMPNAME" VARCHAR2(150 BYTE), 
	"TAGS" VARCHAR2(1000 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE), 
	"LATESTVERSION" VARCHAR2(10 BYTE), 
	"STATUS" VARCHAR2(25 BYTE), 
	"EXTENDIBLETIME" DATE, 
	"LOCKDESCRIPTION" VARCHAR2(500 BYTE), 
	"STORAGELOCATION" VARCHAR2(250 BYTE), 
	"STORAGEVERSION" VARCHAR2(25 BYTE), 
	"FETASSOCID" NUMBER(11,0), 
	"TEMPLOCATION" VARCHAR2(500 BYTE), 
	"AUTO" NUMBER(1,0), 
	"DELETED" NUMBER(1,0), 
	"C_LOCK" NUMBER(1,0), 
	"LOCKEDBY" VARCHAR2(80 BYTE), 
	"APPROVECOUNT" NUMBER(1,0)
   ) SEGMENT CREATION DEFERRED 
  ;

--  DDL for Table COMPSETRECORDS
  CREATE TABLE "COMPSETRECORDS" 
   (	"COMPSETID" NUMBER(11,0), 
	"ID" NUMBER(11,0), 
	"ORDERVAL" NUMBER(20,10), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"COMPSETRECID" NUMBER, 
	"PARCOMPSETRECID" NUMBER, 
	"RECTYPE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table COMPUSEDFLOWSLOCKEDUSERS
  CREATE TABLE "COMPUSEDFLOWSLOCKEDUSERS" 
   (	"FLOWSLOCKEDRECID" NUMBER(12,0), 
	"FLOWID" NUMBER(*,12), 
	"USERNAME" VARCHAR2(20 BYTE), 
	"COMPID" NUMBER(*,12)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FAVOURITECOMPONENTS
  CREATE TABLE "FAVOURITECOMPONENTS" 
   (	"RECID" NUMBER(11,0), 
	"COMPID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(80 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FEATURES
  CREATE TABLE "FEATURES" 
   (	"FETSN" VARCHAR2(50 BYTE), 
	"FETNAME" VARCHAR2(200 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"PSN" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FETASSOCS
  CREATE TABLE "FETASSOCS" 
   (	"FETASSOCID" NUMBER, 
	"FETSN" VARCHAR2(50 BYTE), 
	"PFSN" VARCHAR2(50 BYTE), 
	"PSN" VARCHAR2(50 BYTE), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"PASSOCID" NUMBER(11,0)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWATTACHMENTS
  CREATE TABLE "FLOWATTACHMENTS" 
   (	"ATTACHID" NUMBER(11,0), 
	"FLOWID" NUMBER(11,0), 
	"ATTACHMENTNAME" VARCHAR2(250 BYTE), 
	"ATTACHMENT" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
 LOB ("ATTACHMENT") STORE AS BASICFILE (
  ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

--  DDL for Table FLOWCOMPONENTS
  CREATE TABLE "FLOWCOMPONENTS" 
   (	"FLOWID" NUMBER(11,0), 
	"COMPID" NUMBER(11,0), 
	"COMPSETID" NUMBER(11,0), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  ;

--  DDL for Table FLOWHISTORY
  CREATE TABLE "FLOWHISTORY" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(80 BYTE), 
	"ACTION" VARCHAR2(50 BYTE), 
	"PERFORMEDAT" TIMESTAMP (6), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"FLOWID" NUMBER(11,0), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWS
  CREATE TABLE "FLOWS" 
   (	"FLOWID" NUMBER(11,0), 
	"FLOWNAME" VARCHAR2(500 BYTE), 
	"TAGS" VARCHAR2(1000 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE), 
	"LATESTVERSION" VARCHAR2(10 BYTE), 
	"STATUS" VARCHAR2(25 BYTE), 
	"STORAGELOCATION" VARCHAR2(250 BYTE), 
	"STORAGEVERSION" VARCHAR2(25 BYTE), 
	"TEMPLOCATION" VARCHAR2(500 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"FETASSOCID" NUMBER(11,0), 
	"PASSOCID" NUMBER(11,0), 
	"C_LOCK" NUMBER(1,0) DEFAULT 0, 
	"APPROVECOUNT" NUMBER(1,0) DEFAULT 0, 
	"FTYPE" VARCHAR2(20 BYTE), 
	"LOCKEDBY" VARCHAR2(80 BYTE), 
	"FLOWTYPE" CHAR(50 BYTE) DEFAULT 'Internal'
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWSTRUCTUREBLOCKS
  CREATE TABLE "FLOWSTRUCTUREBLOCKS" 
   (	"FLOWBLOCKID" NUMBER(11,0), 
	"PARBLOCKID" NUMBER(11,0), 
	"ID" VARCHAR2(11 BYTE), 
	"BLOCKTYPE" VARCHAR2(20 BYTE), 
	"ROWORDERVALUE" NUMBER(20,10), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"FLOWSCRIPTID" NUMBER, 
	"VERSION" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWSTRUCTURESCRIPTS
  CREATE TABLE "FLOWSTRUCTURESCRIPTS" 
   (	"FLOWSCRIPTID" NUMBER(11,0), 
	"FLOWID" NUMBER(11,0), 
	"ROWORDER" NUMBER(20,10), 
	"SCRIPTNAME" VARCHAR2(200 BYTE), 
	"SCRIPTDESCRIPTION" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWTESTDATA
  CREATE TABLE "FLOWTESTDATA" 
   (	"FLOWTESTDATAID" NUMBER(11,0), 
	"FLOWBLOCKID" NUMBER(11,0), 
	"COMPID" NUMBER(11,0), 
	"LINEID" NUMBER(11,0), 
	"ROWORDER" NUMBER(20,10), 
	"TESTDATA" VARCHAR2(500 BYTE), 
	"FLOWID" NUMBER, 
	"TYPE" VARCHAR2(3 BYTE), 
	"OPINCR" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWTYPES
  CREATE TABLE "FLOWTYPES" 
   (	"FTYPE" VARCHAR2(20 BYTE), 
	"FTYPENAME" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FLOWVARS
  CREATE TABLE "FLOWVARS" 
   (	"FLOWVARID" NUMBER(11,0), 
	"FLOWBLOCKID" NUMBER(11,0), 
	"OPVAR" VARCHAR2(100 BYTE), 
	"OINCR" NUMBER(12,0), 
	"COMPID" NUMBER(11,0), 
	"LINEID" NUMBER(11,0), 
	"ROWORDER" NUMBER(20,10), 
	"FLOWID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table FUNCTIONS
  CREATE TABLE "FUNCTIONS" 
   (	"FUNCID" NUMBER(11,0), 
	"FUNCNAME" VARCHAR2(250 BYTE), 
	"PARAMCOUNT" NUMBER(2,0), 
	"COMMENTS" VARCHAR2(250 BYTE), 
	"OBJID" NUMBER(11,0), 
	"PARAMS" VARCHAR2(250 BYTE), 
	"TESTPLANDESCF" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table KEYWORDS
  CREATE TABLE "KEYWORDS" 
   (	"KEYID" NUMBER(11,0), 
	"KEYWORD" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table MESSAGES
  CREATE TABLE "MESSAGES" 
   (	"CODE" VARCHAR2(100 BYTE), 
	"TYPE" VARCHAR2(25 BYTE), 
	"MESSAGE" VARCHAR2(1000 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table NOTIFICATIONS
  CREATE TABLE "NOTIFICATIONS" 
   (	"NOTIFICATIONID" NUMBER(11,0), 
	"TYPE" VARCHAR2(250 BYTE), 
	"NOTIFICATIONFOR" VARCHAR2(250 BYTE), 
	"ACTION" VARCHAR2(250 BYTE), 
	"READ" NUMBER(1,0), 
	"STATUS" VARCHAR2(250 BYTE), 
	"FORID" NUMBER(11,0), 
	"FROMUSER" VARCHAR2(250 BYTE), 
	"TOUSER" VARCHAR2(250 BYTE), 
	"ACTIONPERFORMEDAT" TIMESTAMP (6), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"TITLE" VARCHAR2(500 BYTE), 
	"DESCRIPTION" VARCHAR2(2000 BYTE), 
	"PARENTNOTIFICATIONID" NUMBER(11,0), 
	"RECEIVEDDATE" TIMESTAMP (6), 
	"PFSN" VARCHAR2(20 BYTE), 
	"COMMENTS" VARCHAR2(2000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table NOTIFICATIONS_ARCHIVE
  CREATE TABLE "NOTIFICATIONS_ARCHIVE" 
   (	"NOTIFICATIONID" NUMBER(11,0), 
	"TYPE" VARCHAR2(250 BYTE), 
	"NOTIFICATIONFOR" VARCHAR2(250 BYTE), 
	"ACTION" VARCHAR2(250 BYTE), 
	"READ" NUMBER(1,0), 
	"STATUS" VARCHAR2(250 BYTE), 
	"FORID" NUMBER(11,0), 
	"FROMUSER" VARCHAR2(250 BYTE), 
	"TOUSER" VARCHAR2(250 BYTE), 
	"ACTIONPERFORMEDAT" TIMESTAMP (6), 
	"DELETED" NUMBER(1,0), 
	"TITLE" VARCHAR2(500 BYTE), 
	"DESCRIPTION" VARCHAR2(2000 BYTE), 
	"PARENTNOTIFICATIONID" NUMBER(11,0), 
	"RECEIVEDDATE" TIMESTAMP (6), 
	"PFSN" VARCHAR2(20 BYTE), 
	"COMMENTS" VARCHAR2(2000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  ;

--  DDL for Table OBJECTTYPES
  CREATE TABLE "OBJECTTYPES" 
   (	"OBJID" NUMBER(11,0), 
	"OBJECT" VARCHAR2(500 BYTE), 
	"OBJECTTYPE" VARCHAR2(50 BYTE), 
	"COMMENTS" VARCHAR2(400 BYTE), 
	"KEYID" NUMBER(11,0), 
	"CODE_FORM" VARCHAR2(300 BYTE), 
	"CODE_WEB" VARCHAR2(300 BYTE), 
	"CODE_FORMFLEX" VARCHAR2(300 BYTE), 
	"WEB_XPATH" VARCHAR2(300 BYTE), 
	"FORM_XPATH" VARCHAR2(300 BYTE), 
	"FORMFLEX_XPATH" VARCHAR2(300 BYTE), 
	"IPCOUNT" NUMBER, 
	"CODE_TELNET" VARCHAR2(300 BYTE), 
	"TESTPLANDESC" VARCHAR2(200 BYTE), 
	"JTT_XPATH" VARCHAR2(300 BYTE), 
	"CODE_ADF" VARCHAR2(300 BYTE), 
	"ADF_XPATH" VARCHAR2(300 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table PASSOCS
  CREATE TABLE "PASSOCS" 
   (	"PASSOCID" NUMBER(11,0), 
	"PSN" VARCHAR2(50 BYTE), 
	"PFSN" VARCHAR2(50 BYTE), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"PFASSOCSID" NUMBER(11,0)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table PFASSOCS
  CREATE TABLE "PFASSOCS" 
   (	"PFASSOCID" NUMBER(11,0), 
	"PFSN" VARCHAR2(50 BYTE), 
	"RELNAME" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table PRODUCTFAMILIES
  CREATE TABLE "PRODUCTFAMILIES" 
   (	"PFSN" VARCHAR2(50 BYTE), 
	"PFNAME" VARCHAR2(500 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table PRODUCTS
  CREATE TABLE "PRODUCTS" 
   (	"PSN" VARCHAR2(50 BYTE), 
	"PNAME" VARCHAR2(500 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"PFSN" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table PS_TXN
  CREATE TABLE "PS_TXN" 
   (	"ID" NUMBER(20,0), 
	"PARENTID" NUMBER(20,0), 
	"COLLID" NUMBER(10,0), 
	"CONTENT" BLOB, 
	"CREATION_DATE" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  
 LOB ("CONTENT") STORE AS BASICFILE (
  ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

--  DDL for Table RELEASES
  CREATE TABLE "RELEASES" 
   (	"RELNAME" VARCHAR2(50 BYTE), 
	"RELDESC" VARCHAR2(500 BYTE), 
	"RELLOC" VARCHAR2(500 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table ROLEACTIONS
  CREATE TABLE "ROLEACTIONS" 
   (	"ACTIONID" NUMBER, 
	"ACTIONS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table ROLES
  CREATE TABLE "ROLES" 
   (	"ROLE" NUMBER(11,0), 
	"ROLENAME" VARCHAR2(250 BYTE), 
	"ACTIONS" VARCHAR2(1000 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table RULES
  CREATE TABLE "RULES" 
   (	"RULEID" NUMBER(11,0), 
	"KEYID" NUMBER(11,0), 
	"OBJID" NUMBER(11,0), 
	"IPCOUNT" NUMBER(2,0)
   ) SEGMENT CREATION DEFERRED 
  ;

--  DDL for Table SETTINGS
  CREATE TABLE "SETTINGS" 
   (	"DEFAULTEXCELFOLDERNAME" VARCHAR2(50 BYTE), 
	"MAXIMUMTIMEOUT" VARCHAR2(20 BYTE), 
	"NOTIFICATIONTYPE" VARCHAR2(20 BYTE), 
	"ASSIGNMENTPOINTER" VARCHAR2(20 BYTE), 
	"INTERMEDSTORAGE" VARCHAR2(20 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  ;

--  DDL for Table SETUPHISTORY
  CREATE TABLE "SETUPHISTORY" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(25 BYTE), 
	"ACTION" VARCHAR2(50 BYTE), 
	"PERFORMEDAT" DATE, 
	"RELNAME" VARCHAR2(500 BYTE), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"ONTABLE" VARCHAR2(150 BYTE), 
	"PKVALUE" VARCHAR2(25 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table STATUS
  CREATE TABLE "STATUS" 
   (	"ID" NUMBER(4,0), 
	"STATUSTYPE" VARCHAR2(100 BYTE), 
	"STATUSVALUE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table USERHISTORY
  CREATE TABLE "USERHISTORY" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(25 BYTE), 
	"ACTION" VARCHAR2(50 BYTE), 
	"RELNAME" VARCHAR2(500 BYTE), 
	"COMMENTS" VARCHAR2(500 BYTE), 
	"ONUSERNAME" VARCHAR2(150 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"PERFORMEDAT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table USERROLES
  CREATE TABLE "USERROLES" 
   (	"RECID" NUMBER(11,0), 
	"USERNAME" VARCHAR2(80 BYTE), 
	"ROLE" NUMBER(11,0), 
	"PFSN" VARCHAR2(50 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table USERS
  CREATE TABLE "USERS" 
   (	"USERNAME" VARCHAR2(80 BYTE), 
	"FULLNAME" VARCHAR2(300 BYTE), 
	"STATUS" VARCHAR2(50 BYTE), 
	"MGR" VARCHAR2(80 BYTE), 
	"PASS" VARCHAR2(2000 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"APPROLE" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(250 BYTE), 
	"DESIGNATION" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;

--  DDL for Table USERSETTINGS
  CREATE TABLE "USERSETTINGS" 
   (	"SETTINGID" NUMBER, 
	"USERNAME" VARCHAR2(80 BYTE), 
	"TYPE" VARCHAR2(100 BYTE), 
	"PFSN" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  ;


--  DDL for View ASSETS_V
  CREATE OR REPLACE FORCE VIEW "ASSETS_V" ("SCRIPTNAME", "SCRIPTLOCATION", "LIBFORMAT") AS 
  select "SCRIPTNAME","SCRIPTLOCATION","LIBFORMAT" from ASSETS;

--  DDL for View COMPONENTCODE_V
  CREATE OR REPLACE FORCE VIEW "COMPONENTCODE_V" ("LINEID", "COMPID", "KEYID", "OBJID", "CAPTION", "LOGICALNAME", "OPVARNAME", "ROWORDER", "FUNCID", "DEFAULTDATA", "IPPARAMCOUNT", "RERUNNABLE", "DELETED", "VER", "TOOLTIP", "MANDATORY", "PREVLINEID") AS 
  select "LINEID","COMPID","KEYID","OBJID","CAPTION","LOGICALNAME","OPVARNAME","ROWORDER","FUNCID","DEFAULTDATA","IPPARAMCOUNT","RERUNNABLE","DELETED","VER","TOOLTIP","MANDATORY","PREVLINEID" from componentcode;

--  DDL for View COMPONENTHISTORY_V
  CREATE OR REPLACE FORCE VIEW "COMPONENTHISTORY_V" ("RECID", "USERNAME", "ACTION", "PERFORMEDAT", "COMMENTS", "COMPID", "RELNAME", "DELETED") AS 
  SELECT "RECID","USERNAME","ACTION","PERFORMEDAT","COMMENTS","COMPID","RELNAME","DELETED" FROM COMPONENTHISTORY;

--  DDL for View COMPONENTSETHISTORY_V
  CREATE OR REPLACE FORCE VIEW "COMPONENTSETHISTORY_V" ("RECID", "USERNAME", "ACTION", "PERFORMEDAT", "COMMENTS", "COMPSETID", "RELNAME", "DELETED") AS 
  SELECT "RECID","USERNAME","ACTION","PERFORMEDAT","COMMENTS","COMPSETID","RELNAME","DELETED" FROM COMPONENTSETHISTORY;

--  DDL for View COMPONENTSETS_V
  CREATE OR REPLACE FORCE VIEW "COMPONENTSETS_V" ("COMPSETID", "COMPSETNAME", "TAGS", "LATESTVERSION", "STATUS", "FETASSOCID", "DELETED", "ORDERVAL", "C_LOCK", "APPROVECOUNT", "LOCKEDBY", "DESCRIPTION") AS 
  select "COMPSETID","COMPSETNAME","TAGS","LATESTVERSION","STATUS","FETASSOCID","DELETED","ORDERVAL","C_LOCK","APPROVECOUNT","LOCKEDBY","DESCRIPTION" from componentsets;

--  DDL for View COMPONENTS_V
  CREATE OR REPLACE FORCE VIEW "COMPONENTS_V" ("COMPID", "COMPNAME", "TAGS", "DESCRIPTION", "LATESTVERSION", "STATUS", "EXTENDIBLETIME", "LOCKDESCRIPTION", "STORAGELOCATION", "STORAGEVERSION", "FETASSOCID", "TEMPLOCATION", "AUTO", "DELETED", "C_LOCK", "LOCKEDBY", "APPROVECOUNT", "COMPTYPE") AS 
  SELECT "COMPID","COMPNAME","TAGS","DESCRIPTION","LATESTVERSION","STATUS","EXTENDIBLETIME","LOCKDESCRIPTION","STORAGELOCATION","STORAGEVERSION","FETASSOCID","TEMPLOCATION","AUTO","DELETED","C_LOCK","LOCKEDBY","APPROVECOUNT","COMPTYPE"
FROM COMPONENTS;

--  DDL for View COMPSETRECORDS_V
  CREATE OR REPLACE FORCE VIEW "COMPSETRECORDS_V" ("COMPSETID", "ID", "ORDERVAL", "DELETED", "COMPSETRECID", "PARCOMPSETRECID", "RECTYPE") AS 
  SELECT "COMPSETID","ID","ORDERVAL","DELETED","COMPSETRECID","PARCOMPSETRECID","RECTYPE" FROM COMPSETRECORDS;

--  DDL for View COMPUSEDFLOWSLOCKEDUSERS_V
  CREATE OR REPLACE FORCE VIEW "COMPUSEDFLOWSLOCKEDUSERS_V" ("FLOWSLOCKEDRECID", "FLOWID", "USERNAME", "COMPID") AS 
  select "FLOWSLOCKEDRECID","FLOWID","USERNAME","COMPID" from COMPUSEDFLOWSLOCKEDUSERS;

--  DDL for View FAVOURITECOMPONENTS_V
  CREATE OR REPLACE FORCE VIEW "FAVOURITECOMPONENTS_V" ("RECID", "COMPID", "USERNAME") AS 
  select "RECID","COMPID","USERNAME" from FAVOURITECOMPONENTS;

--  DDL for View FEATURES_V
  CREATE OR REPLACE FORCE VIEW "FEATURES_V" ("FETSN", "FETNAME", "DELETED", "PSN") AS 
  select "FETSN","FETNAME","DELETED","PSN" from FEATURES;

--  DDL for View FETASSOCS_V
  CREATE OR REPLACE FORCE VIEW "FETASSOCS_V" ("FETASSOCID", "FETSN", "PFSN", "PSN", "RELNAME", "DELETED", "PASSOCID") AS 
  SELECT "FETASSOCID","FETSN","PFSN","PSN","RELNAME","DELETED","PASSOCID" FROM FETASSOCS;

--  DDL for View FLOWATTACHMENTS_V
  CREATE OR REPLACE FORCE VIEW "FLOWATTACHMENTS_V" ("ATTACHID", "FLOWID", "ATTACHMENTNAME", "ATTACHMENT") AS 
  select "ATTACHID","FLOWID","ATTACHMENTNAME","ATTACHMENT" from flowattachments;

--  DDL for View FLOWCOMPONENTS_V
  CREATE OR REPLACE FORCE VIEW "FLOWCOMPONENTS_V" ("FLOWID", "COMPID", "COMPSETID", "DELETED") AS 
  SELECT "FLOWID","COMPID","COMPSETID","DELETED" FROM FLOWCOMPONENTS;

--  DDL for View FLOWHISTORY_V
  CREATE OR REPLACE FORCE VIEW "FLOWHISTORY_V" ("RECID", "USERNAME", "ACTION", "PERFORMEDAT", "COMMENTS", "FLOWID", "RELNAME", "DELETED") AS 
  SELECT "RECID","USERNAME","ACTION","PERFORMEDAT","COMMENTS","FLOWID","RELNAME","DELETED" FROM FLOWHISTORY;

--  DDL for View FLOWSTRUCTUREBLOCKS_V
  CREATE OR REPLACE FORCE VIEW "FLOWSTRUCTUREBLOCKS_V" ("FLOWBLOCKID", "PARBLOCKID", "ID", "BLOCKTYPE", "ROWORDERVALUE", "COMMENTS", "FLOWSCRIPTID", "VERSION") AS 
  select "FLOWBLOCKID","PARBLOCKID","ID","BLOCKTYPE","ROWORDERVALUE","COMMENTS","FLOWSCRIPTID","VERSION" from flowstructureblocks;

--  DDL for View FLOWSTRUCTURESCRIPTS_V
  CREATE OR REPLACE FORCE VIEW "FLOWSTRUCTURESCRIPTS_V" ("FLOWSCRIPTID", "FLOWID", "ROWORDER", "SCRIPTNAME", "SCRIPTDESCRIPTION") AS 
  select "FLOWSCRIPTID","FLOWID","ROWORDER","SCRIPTNAME","SCRIPTDESCRIPTION" from FLOWSTRUCTURESCRIPTS;

--  DDL for View FLOWS_V
  CREATE OR REPLACE FORCE VIEW "FLOWS_V" ("FLOWID", "FLOWNAME", "TAGS", "DESCRIPTION", "LATESTVERSION", "STATUS", "STORAGELOCATION", "STORAGEVERSION", "TEMPLOCATION", "DELETED", "FETASSOCID", "PASSOCID", "C_LOCK", "APPROVECOUNT", "FTYPE", "LOCKEDBY", "FLOWTYPE") AS 
  Select "FLOWID","FLOWNAME","TAGS","DESCRIPTION","LATESTVERSION","STATUS","STORAGELOCATION","STORAGEVERSION","TEMPLOCATION","DELETED","FETASSOCID","PASSOCID","C_LOCK","APPROVECOUNT","FTYPE","LOCKEDBY","FLOWTYPE" from Flows;

--  DDL for View FLOWTESTDATA_V
  CREATE OR REPLACE FORCE VIEW "FLOWTESTDATA_V" ("FLOWTESTDATAID", "FLOWBLOCKID", "COMPID", "LINEID", "ROWORDER", "TESTDATA", "FLOWID", "TYPE", "OPINCR") AS 
  SELECT "FLOWTESTDATAID","FLOWBLOCKID","COMPID","LINEID","ROWORDER","TESTDATA","FLOWID","TYPE","OPINCR" FROM FLOWTESTDATA;

--  DDL for View FLOWTYPES_V
  CREATE OR REPLACE FORCE VIEW "FLOWTYPES_V" ("FTYPE", "FTYPENAME") AS 
  select "FTYPE","FTYPENAME" from FLOWTYPES;

--  DDL for View FLOWVARS_V
  CREATE OR REPLACE FORCE VIEW "FLOWVARS_V" ("FLOWVARID", "FLOWBLOCKID", "OPVAR", "OINCR", "COMPID", "LINEID", "ROWORDER", "FLOWID") AS 
  SELECT "FLOWVARID","FLOWBLOCKID","OPVAR","OINCR","COMPID","LINEID","ROWORDER","FLOWID" FROM FLOWVARS;

--  DDL for View FUNCTIONS_V
  CREATE OR REPLACE FORCE VIEW "FUNCTIONS_V" ("FUNCID", "FUNCNAME", "PARAMCOUNT", "COMMENTS", "OBJID", "PARAMS", "TESTPLANDESCF") AS 
  select "FUNCID","FUNCNAME","PARAMCOUNT","COMMENTS","OBJID","PARAMS","TESTPLANDESCF" from functions;

--  DDL for View KEYWORDS_V
  CREATE OR REPLACE FORCE VIEW "KEYWORDS_V" ("KEYID", "KEYWORD") AS 
  SELECT "KEYID","KEYWORD" FROM KEYWORDS;

--  DDL for View MESSAGES_V
  CREATE OR REPLACE FORCE VIEW "MESSAGES_V" ("CODE", "TYPE", "MESSAGE", "DELETED") AS 
  SELECT "CODE","TYPE","MESSAGE","DELETED" FROM MESSAGES;

--  DDL for View NOTIFICATIONS_V
  CREATE OR REPLACE FORCE VIEW "NOTIFICATIONS_V" ("NOTIFICATIONID", "TYPE", "NOTIFICATIONFOR", "ACTION", "READ", "STATUS", "FORID", "FROMUSER", "TOUSER", "ACTIONPERFORMEDAT", "DELETED", "TITLE", "DESCRIPTION", "PARENTNOTIFICATIONID", "RECEIVEDDATE", "PFSN", "COMMENTS") AS 
  select "NOTIFICATIONID","TYPE","NOTIFICATIONFOR","ACTION","READ","STATUS","FORID","FROMUSER","TOUSER","ACTIONPERFORMEDAT","DELETED","TITLE","DESCRIPTION","PARENTNOTIFICATIONID","RECEIVEDDATE","PFSN","COMMENTS" from NOTIFICATIONS;

--  DDL for View OBJECTTYPES_V
  CREATE OR REPLACE FORCE VIEW "OBJECTTYPES_V" ("OBJID", "OBJECT", "OBJECTTYPE", "COMMENTS", "KEYID", "CODE_FORM", "CODE_WEB", "CODE_FORMFLEX", "WEB_XPATH", "FORM_XPATH", "FORMFLEX_XPATH", "IPCOUNT", "CODE_TELNET", "TESTPLANDESC", "JTT_XPATH", "CODE_ADF", "ADF_XPATH") AS 
  select "OBJID","OBJECT","OBJECTTYPE","COMMENTS","KEYID","CODE_FORM","CODE_WEB","CODE_FORMFLEX","WEB_XPATH","FORM_XPATH","FORMFLEX_XPATH","IPCOUNT","CODE_TELNET","TESTPLANDESC","JTT_XPATH","CODE_ADF","ADF_XPATH" from OBJECTTYPES;

--  DDL for View PASSOCS_V
  CREATE OR REPLACE FORCE VIEW "PASSOCS_V" ("PASSOCID", "PSN", "PFSN", "RELNAME", "DELETED", "PFASSOCSID") AS 
  SELECT "PASSOCID","PSN","PFSN","RELNAME","DELETED","PFASSOCSID" FROM PASSOCS;

--  DDL for View PFASSOCS_V
  CREATE OR REPLACE FORCE VIEW "PFASSOCS_V" ("PFASSOCID", "PFSN", "RELNAME", "DELETED") AS 
  SELECT "PFASSOCID","PFSN","RELNAME","DELETED" FROM PFASSOCS;

--  DDL for View PRODUCTFAMILIES_V
  CREATE OR REPLACE FORCE VIEW "PRODUCTFAMILIES_V" ("PFSN", "PFNAME", "DELETED") AS 
  SELECT "PFSN","PFNAME","DELETED" FROM PRODUCTFAMILIES;

--  DDL for View PRODUCTS_V
  CREATE OR REPLACE FORCE VIEW "PRODUCTS_V" ("PSN", "PNAME", "DELETED", "PFSN") AS 
  select "PSN","PNAME","DELETED","PFSN" from PRODUCTS;

--  DDL for View RELEASES_V
  CREATE OR REPLACE FORCE VIEW "RELEASES_V" ("RELNAME", "RELDESC", "RELLOC", "DELETED") AS 
  SELECT "RELNAME","RELDESC","RELLOC","DELETED" FROM RELEASES;

--  DDL for View ROLES_V
  CREATE OR REPLACE FORCE VIEW "ROLES_V" ("ROLE", "ROLENAME", "ACTIONS", "DELETED") AS 
  SELECT "ROLE","ROLENAME","ACTIONS","DELETED" FROM ROLES;

--  DDL for View RULES_V
  CREATE OR REPLACE FORCE VIEW "RULES_V" ("RULEID", "KEYID", "OBJID", "IPCOUNT") AS 
  SELECT "RULEID","KEYID","OBJID","IPCOUNT" FROM RULES;

--  DDL for View SETTINGS_V
  CREATE OR REPLACE FORCE VIEW "SETTINGS_V" ("DEFAULTEXCELFOLDERNAME", "MAXIMUMTIMEOUT", "NOTIFICATIONTYPE", "ASSIGNMENTPOINTER", "INTERMEDSTORAGE", "DELETED") AS 
  SELECT "DEFAULTEXCELFOLDERNAME","MAXIMUMTIMEOUT","NOTIFICATIONTYPE","ASSIGNMENTPOINTER","INTERMEDSTORAGE","DELETED" FROM SETTINGS;

--  DDL for View SETUPHISTORY_V
  CREATE OR REPLACE FORCE VIEW "SETUPHISTORY_V" ("RECID", "USERNAME", "ACTION", "PERFORMEDAT", "RELNAME", "COMMENTS", "ONTABLE", "PKVALUE", "DELETED") AS 
  SELECT "RECID","USERNAME","ACTION","PERFORMEDAT","RELNAME","COMMENTS","ONTABLE","PKVALUE","DELETED" FROM SETUPHISTORY;

--  DDL for View STATUS_V
  CREATE OR REPLACE FORCE VIEW "STATUS_V" ("ID", "STATUSTYPE", "STATUSVALUE") AS 
  SELECT "ID","STATUSTYPE","STATUSVALUE" FROM STATUS;

--  DDL for View USERHISTORY_V
  CREATE OR REPLACE FORCE VIEW "USERHISTORY_V" ("RECID", "USERNAME", "ACTION", "RELNAME", "COMMENTS", "ONUSERNAME", "DELETED", "PERFORMEDAT") AS 
  select "RECID","USERNAME","ACTION","RELNAME","COMMENTS","ONUSERNAME","DELETED","PERFORMEDAT" from userhistory;

--  DDL for View USERROLES_V
  CREATE OR REPLACE FORCE VIEW "USERROLES_V" ("RECID", "USERNAME", "ROLE", "PFSN", "DELETED") AS 
  SELECT "RECID","USERNAME","ROLE","PFSN","DELETED" FROM USERROLES;

--  DDL for View USERS_V
  CREATE OR REPLACE FORCE VIEW "USERS_V" ("USERNAME", "FULLNAME", "STATUS", "MGR", "PASS", "DELETED", "APPROLE", "EMAIL", "DESIGNATION") AS 
  select "USERNAME","FULLNAME","STATUS","MGR","PASS","DELETED","APPROLE","EMAIL","DESIGNATION" from users;

--  DDL for View VCOMPS
  CREATE OR REPLACE FORCE VIEW "VCOMPS" ("RELEASENAME", "PFASSID", "PF", "PASSID", "P", "FETASSID", "F", "COMPNAME", "COMPID", "COMPONENT_TAGS", "COMPONENT_DESCRIPTION", "COMPTYPE") AS 
  (

select releases.relname as ReleaseName , 
pfassocs.pfassocid as pfassid,
pfname as pf,
passocs.passocid as passid,
pname as p,
fetassocs.fetassocid as fetassid,
fetname as f 
,compname
,compid 
,components.tags as component_tags
,components.description as component_description
,comptype

from 
releases,productfamilies,pfassocs,products,passocs,features,fetassocs
,components 
where 
pfassocs.pfsn=productfamilies.pfsn and 
pfassocs.relname=releases.relname and 
passocs.pfassocsid=pfassocs.pfassocid and
passocs.psn=products.psn and
fetassocs.passocid=passocs.passocid and
fetassocs.fetsn=features.fetsn and 
fetassocs.fetassocid=components.fetassocid
) order by releases.relname , pfname,pname,fetname,compname;

--  DDL for View VFEATURES
  CREATE OR REPLACE FORCE VIEW "VFEATURES" ("RELEASENAME", "PFASSID", "PF", "PASSID", "P", "FETASSID", "F") AS 
  (
select releases.relname as ReleaseName , pfassocs.pfassocid as pfassid,pfname as pf,passocs.passocid as passid,pname as p,fetassocs.fetassocid as fetassid,fetname as f from 
releases,productfamilies,pfassocs,products,passocs,features,fetassocs where 
pfassocs.pfsn=productfamilies.pfsn and 
pfassocs.relname=releases.relname and 
passocs.pfassocsid=pfassocs.pfassocid and
passocs.psn=products.psn and
fetassocs.passocid=passocs.passocid and
fetassocs.fetsn=features.fetsn 
) order by releases.relname , pfname,pname,fetname;




--  DDL for Index ASSETS_PK
  CREATE UNIQUE INDEX "ASSETS_PK" ON "ASSETS" ("SCRIPTNAME") 
  ;

--  DDL for Index COMPONENTCODE_PK
  CREATE UNIQUE INDEX "COMPONENTCODE_PK" ON "COMPONENTCODE" ("LINEID") 
  ;

--  DDL for Index COMPONENTHISTORY_PK
  CREATE UNIQUE INDEX "COMPONENTHISTORY_PK" ON "COMPONENTHISTORY" ("RECID") 
  ;

--  DDL for Index COMPONENTSETHISTORY_PK
  CREATE UNIQUE INDEX "COMPONENTSETHISTORY_PK" ON "COMPONENTSETHISTORY" ("RECID") 
  ;

--  DDL for Index COMPONENTSETS_CK_1
  CREATE UNIQUE INDEX "COMPONENTSETS_CK_1" ON "COMPONENTSETS" ("COMPSETNAME", "FETASSOCID") 
  ;

--  DDL for Index COMPONENTSETS_PK
  CREATE UNIQUE INDEX "COMPONENTSETS_PK" ON "COMPONENTSETS" ("COMPSETID") 
  ;

--  DDL for Index COMPONENTS_CK_1
  CREATE UNIQUE INDEX "COMPONENTS_CK_1" ON "COMPONENTS" ("COMPNAME", "FETASSOCID") 
  ;

--  DDL for Index COMPONENTS_PK
  CREATE UNIQUE INDEX "COMPONENTS_PK" ON "COMPONENTS" ("COMPID") 
  ;

--  DDL for Index COMPUSEDFLOWSLOCKEDUSERS_PK
  CREATE UNIQUE INDEX "COMPUSEDFLOWSLOCKEDUSERS_PK" ON "COMPUSEDFLOWSLOCKEDUSERS" ("FLOWSLOCKEDRECID") 
  ;

--  DDL for Index CSR_PK
  CREATE UNIQUE INDEX "CSR_PK" ON "COMPSETRECORDS" ("COMPSETRECID") 
  ;

--  DDL for Index FAVOURITECOMPONENTS_PK
  CREATE UNIQUE INDEX "FAVOURITECOMPONENTS_PK" ON "FAVOURITECOMPONENTS" ("RECID") 
  ;

--  DDL for Index FEATURES_PK
  CREATE UNIQUE INDEX "FEATURES_PK" ON "FEATURES" ("FETSN") 
  ;

--  DDL for Index FETASSOCS_CK_1
  CREATE UNIQUE INDEX "FETASSOCS_CK_1" ON "FETASSOCS" ("FETSN", "PFSN", "PSN", "RELNAME") 
  ;

--  DDL for Index FETASSOCS_PK
  CREATE UNIQUE INDEX "FETASSOCS_PK" ON "FETASSOCS" ("FETASSOCID") 
  ;

--  DDL for Index FLOWATTACHMENTS_PK
  CREATE UNIQUE INDEX "FLOWATTACHMENTS_PK" ON "FLOWATTACHMENTS" ("ATTACHID") 
  ;

--  DDL for Index FLOWHISTORY_PK
  CREATE UNIQUE INDEX "FLOWHISTORY_PK" ON "FLOWHISTORY" ("RECID") 
  ;

--  DDL for Index FLOWSTRUCTUREBLOCKS_PK
  CREATE UNIQUE INDEX "FLOWSTRUCTUREBLOCKS_PK" ON "FLOWSTRUCTUREBLOCKS" ("FLOWBLOCKID") 
  ;

--  DDL for Index FLOWSTRUCTURESCRIPTS_PK
  CREATE UNIQUE INDEX "FLOWSTRUCTURESCRIPTS_PK" ON "FLOWSTRUCTURESCRIPTS" ("FLOWSCRIPTID") 
  ;

--  DDL for Index FLOWS_PK
  CREATE UNIQUE INDEX "FLOWS_PK" ON "FLOWS" ("FLOWID") 
  ;

--  DDL for Index FLOWTESTDATA_PK
  CREATE UNIQUE INDEX "FLOWTESTDATA_PK" ON "FLOWTESTDATA" ("FLOWTESTDATAID") 
  ;

--  DDL for Index FLOWTYPES_PK
  CREATE UNIQUE INDEX "FLOWTYPES_PK" ON "FLOWTYPES" ("FTYPE") 
  ;

--  DDL for Index FLOWVARS_PK
  CREATE UNIQUE INDEX "FLOWVARS_PK" ON "FLOWVARS" ("FLOWVARID") 
  ;

--  DDL for Index FUNCTIONS_PK
  CREATE UNIQUE INDEX "FUNCTIONS_PK" ON "FUNCTIONS" ("FUNCID") 
  ;

--  DDL for Index KEYWORDS_PK
  CREATE UNIQUE INDEX "KEYWORDS_PK" ON "KEYWORDS" ("KEYID") 
  ;

--  DDL for Index MESSAGES_PK
  CREATE UNIQUE INDEX "MESSAGES_PK" ON "MESSAGES" ("CODE") 
  ;

--  DDL for Index NOTIFICATIONS_PK
  CREATE UNIQUE INDEX "NOTIFICATIONS_PK" ON "NOTIFICATIONS" ("NOTIFICATIONID") 
  ;

--  DDL for Index OBJECTTYPES_PK
  CREATE UNIQUE INDEX "OBJECTTYPES_PK" ON "OBJECTTYPES" ("OBJID") 
  ;

--  DDL for Index PASSOCS_PK
  CREATE UNIQUE INDEX "PASSOCS_PK" ON "PASSOCS" ("PASSOCID") 
  ;

--  DDL for Index PASSOC_CK_1
  CREATE UNIQUE INDEX "PASSOC_CK_1" ON "PASSOCS" ("PSN", "PFSN", "RELNAME") 
  ;

--  DDL for Index PFASSOCS_PK
  CREATE UNIQUE INDEX "PFASSOCS_PK" ON "PFASSOCS" ("PFASSOCID") 
  ;

--  DDL for Index PFASSOC_CK_1
  CREATE UNIQUE INDEX "PFASSOC_CK_1" ON "PFASSOCS" ("PFSN", "RELNAME") 
  ;

--  DDL for Index PRODUCTFAMILIES_PK
  CREATE UNIQUE INDEX "PRODUCTFAMILIES_PK" ON "PRODUCTFAMILIES" ("PFSN") 
  ;

--  DDL for Index PRODUCTS_PK
  CREATE UNIQUE INDEX "PRODUCTS_PK" ON "PRODUCTS" ("PSN") 
  ;

--  DDL for Index PS_TXN_PK
  CREATE UNIQUE INDEX "PS_TXN_PK" ON "PS_TXN" ("COLLID", "ID") 
  ;

--  DDL for Index RELEASES_PK
  CREATE UNIQUE INDEX "RELEASES_PK" ON "RELEASES" ("RELNAME") 
  ;

--  DDL for Index ROLEACTIONS_PK
  CREATE UNIQUE INDEX "ROLEACTIONS_PK" ON "ROLEACTIONS" ("ACTIONID") 
  ;

--  DDL for Index ROLES_PK
  CREATE UNIQUE INDEX "ROLES_PK" ON "ROLES" ("ROLE") 
  ;

--  DDL for Index RULES_PK
  CREATE UNIQUE INDEX "RULES_PK" ON "RULES" ("RULEID") 
  ;

--  DDL for Index SETUPHISTORY_PK
  CREATE UNIQUE INDEX "SETUPHISTORY_PK" ON "SETUPHISTORY" ("RECID") 
  ;

--  DDL for Index STATUS_PK
  CREATE UNIQUE INDEX "STATUS_PK" ON "STATUS" ("ID") 
  ;

--  DDL for Index USERHISTORY_PK
  CREATE UNIQUE INDEX "USERHISTORY_PK" ON "USERHISTORY" ("RECID") 
  ;

--  DDL for Index USERNAME_PK
  CREATE UNIQUE INDEX "USERNAME_PK" ON "USERS" ("USERNAME") 
  ;

--  DDL for Index USERROLES_PK
  CREATE UNIQUE INDEX "USERROLES_PK" ON "USERROLES" ("RECID") 
  ;

--  DDL for Index USERSETTINGS_PK
  CREATE UNIQUE INDEX "USERSETTINGS_PK" ON "USERSETTINGS" ("SETTINGID") 
  ;


--  Constraints for Table ASSETS
  ALTER TABLE "ASSETS" ADD CONSTRAINT "ASSETS_PK" PRIMARY KEY ("SCRIPTNAME") ENABLE;
  ALTER TABLE "ASSETS" MODIFY ("SCRIPTNAME" NOT NULL ENABLE);

--  Constraints for Table COMPONENTCODE
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_PK" PRIMARY KEY ("LINEID") ENABLE;
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_CHECK_DEL_CON" CHECK (DELETED=1 or DELETED=0) ENABLE;
  ALTER TABLE "COMPONENTCODE" ADD CHECK (RERUNNABLE=0 or RERUNNABLE=1) ENABLE;
  ALTER TABLE "COMPONENTCODE" MODIFY ("COMPID" CONSTRAINT "COMPID_NOTNULL" NOT NULL ENABLE);

--  Constraints for Table COMPONENTCODE_ARCHIVE
  ALTER TABLE "COMPONENTCODE_ARCHIVE" MODIFY ("COMPID" NOT NULL ENABLE);

--  Constraints for Table COMPONENTHISTORY
  ALTER TABLE "COMPONENTHISTORY" ADD CONSTRAINT "COMPONENTHISTORY_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "COMPONENTHISTORY" ADD CONSTRAINT "COMPONENTHISTORY_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "COMPONENTHISTORY" MODIFY ("RECID" NOT NULL ENABLE);

--  Constraints for Table COMPONENTS
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_CK_1" UNIQUE ("COMPNAME", "FETASSOCID") ENABLE;
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_PK" PRIMARY KEY ("COMPID") ENABLE;
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_APPRCNT_CHECK_CON" CHECK ("APPROVECOUNT"=1 or "APPROVECOUNT"=0) ENABLE;
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_C_LOCK_CHECK_CON" CHECK ("C_LOCK"=1 or "C_LOCK"=0) ENABLE;
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "COMPONENTS" MODIFY ("COMPID" NOT NULL ENABLE);

--  Constraints for Table COMPONENTSETHISTORY
  ALTER TABLE "COMPONENTSETHISTORY" ADD CONSTRAINT "COMPONENTSETHISTORY_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "COMPONENTSETHISTORY" ADD CONSTRAINT "COMPONENTSETHISTORY_CDELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "COMPONENTSETHISTORY" MODIFY ("RECID" NOT NULL ENABLE);

--  Constraints for Table COMPONENTSETS
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_CK_1" UNIQUE ("COMPSETNAME", "FETASSOCID") ENABLE;
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_PK" PRIMARY KEY ("COMPSETID") ENABLE;
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_CHECK_APPCNT_CON" CHECK (APPROVECOUNT=1 or APPROVECOUNT=0) ENABLE;
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_CHECK_c_LOCK_CON" CHECK (C_LOCK=1 or C_LOCK=0) ENABLE;
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "COMPONENTSETS" MODIFY ("COMPSETID" NOT NULL ENABLE);

--  Constraints for Table COMPONENTS_ARCHIVE
  ALTER TABLE "COMPONENTS_ARCHIVE" MODIFY ("COMPID" NOT NULL ENABLE);

--  Constraints for Table COMPSETRECORDS
  ALTER TABLE "COMPSETRECORDS" ADD CONSTRAINT "CSR_PK" PRIMARY KEY ("COMPSETRECID") ENABLE;
  ALTER TABLE "COMPSETRECORDS" ADD CONSTRAINT "COMPSETRECORDS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table COMPUSEDFLOWSLOCKEDUSERS
  ALTER TABLE "COMPUSEDFLOWSLOCKEDUSERS" ADD CONSTRAINT "COMPUSEDFLOWSLOCKEDUSERS_PK" PRIMARY KEY ("FLOWSLOCKEDRECID") ENABLE;
  ALTER TABLE "COMPUSEDFLOWSLOCKEDUSERS" MODIFY ("FLOWSLOCKEDRECID" NOT NULL ENABLE);

--  Constraints for Table FAVOURITECOMPONENTS
  ALTER TABLE "FAVOURITECOMPONENTS" ADD CONSTRAINT "FAVOURITECOMPONENTS_PK" PRIMARY KEY ("RECID") ENABLE;

--  Constraints for Table FEATURES
  ALTER TABLE "FEATURES" ADD CONSTRAINT "FEATURES_PK" PRIMARY KEY ("FETSN") ENABLE;
  ALTER TABLE "FEATURES" ADD CONSTRAINT "FEATURES_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "FEATURES" MODIFY ("FETSN" NOT NULL ENABLE);

--  Constraints for Table FETASSOCS
  ALTER TABLE "FETASSOCS" ADD CONSTRAINT "FETASSOCS_CK_1" UNIQUE ("FETSN", "PFSN", "PSN", "RELNAME") ENABLE;
  ALTER TABLE "FETASSOCS" ADD CONSTRAINT "FETASSOCS_PK" PRIMARY KEY ("FETASSOCID") ENABLE;
  ALTER TABLE "FETASSOCS" ADD CONSTRAINT "FETASSOCS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "FETASSOCS" MODIFY ("FETASSOCID" NOT NULL ENABLE);

--  Constraints for Table FLOWATTACHMENTS
  ALTER TABLE "FLOWATTACHMENTS" ADD CONSTRAINT "FLOWATTACHMENTS_PK" PRIMARY KEY ("ATTACHID") ENABLE;

--  Constraints for Table FLOWCOMPONENTS
  ALTER TABLE "FLOWCOMPONENTS" ADD CONSTRAINT "FLOWCOMPONENTS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table FLOWHISTORY
  ALTER TABLE "FLOWHISTORY" ADD CONSTRAINT "FLOWHISTORY_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "FLOWHISTORY" ADD CONSTRAINT "FLOWHISTORY_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "FLOWHISTORY" MODIFY ("RECID" NOT NULL ENABLE);

--  Constraints for Table FLOWS
  ALTER TABLE "FLOWS" ADD UNIQUE ("FLOWNAME", "FETASSOCID") DISABLE;
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_PK" PRIMARY KEY ("FLOWID") ENABLE;
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_CHECK_APPCNT_CON" CHECK (APPROVECOUNT=1 or APPROVECOUNT=0) ENABLE;
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_CHECK_c_LOCK_CON" CHECK (C_LOCK=1 or C_LOCK=0) ENABLE;
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "FLOWS" MODIFY ("FLOWNAME" CONSTRAINT "FLOWNAME_CON1" NOT NULL ENABLE);
  ALTER TABLE "FLOWS" MODIFY ("FLOWID" NOT NULL ENABLE);

--  Constraints for Table FLOWSTRUCTUREBLOCKS
  ALTER TABLE "FLOWSTRUCTUREBLOCKS" ADD CONSTRAINT "FLOWSTRUCTUREBLOCKS_PK" PRIMARY KEY ("FLOWBLOCKID") ENABLE;
  ALTER TABLE "FLOWSTRUCTUREBLOCKS" MODIFY ("FLOWBLOCKID" NOT NULL ENABLE);

--  Constraints for Table FLOWSTRUCTURESCRIPTS
  ALTER TABLE "FLOWSTRUCTURESCRIPTS" ADD CONSTRAINT "FLOWSTRUCTURESCRIPTS_PK" PRIMARY KEY ("FLOWSCRIPTID") ENABLE;

--  Constraints for Table FLOWTESTDATA
  ALTER TABLE "FLOWTESTDATA" ADD CONSTRAINT "FLOWTESTDATA_PK" PRIMARY KEY ("FLOWTESTDATAID") ENABLE;
  ALTER TABLE "FLOWTESTDATA" MODIFY ("FLOWTESTDATAID" NOT NULL ENABLE);

--  Constraints for Table FLOWTYPES
  ALTER TABLE "FLOWTYPES" ADD CONSTRAINT "FLOWTYPES_PK" PRIMARY KEY ("FTYPE") ENABLE;

--  Constraints for Table FLOWVARS
  ALTER TABLE "FLOWVARS" ADD CONSTRAINT "FLOWVARS_PK" PRIMARY KEY ("FLOWVARID") ENABLE;
  ALTER TABLE "FLOWVARS" MODIFY ("FLOWVARID" NOT NULL ENABLE);

--  Constraints for Table FUNCTIONS
  ALTER TABLE "FUNCTIONS" ADD CONSTRAINT "FUNCTIONS_PK" PRIMARY KEY ("FUNCID") ENABLE;

--  Constraints for Table KEYWORDS
  ALTER TABLE "KEYWORDS" ADD CONSTRAINT "KEYWORDS_PK" PRIMARY KEY ("KEYID") ENABLE;

--  Constraints for Table MESSAGES
  ALTER TABLE "MESSAGES" ADD CONSTRAINT "MESSAGES_PK" PRIMARY KEY ("CODE") ENABLE;
  ALTER TABLE "MESSAGES" ADD CONSTRAINT "MESSAGES_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "MESSAGES" MODIFY ("CODE" NOT NULL ENABLE);

--  Constraints for Table NOTIFICATIONS
  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "NOTIFICATIONS_PK" PRIMARY KEY ("NOTIFICATIONID") ENABLE;
  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "NOTIFICATIONS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table OBJECTTYPES
  ALTER TABLE "OBJECTTYPES" ADD CONSTRAINT "OBJECTTYPES_PK" PRIMARY KEY ("OBJID") ENABLE;

--  Constraints for Table PASSOCS
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOC_CK_1" UNIQUE ("PSN", "PFSN", "RELNAME") ENABLE;
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOCS_PK" PRIMARY KEY ("PASSOCID") ENABLE;
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOCS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "PASSOCS" MODIFY ("PASSOCID" NOT NULL ENABLE);

--  Constraints for Table PFASSOCS
  ALTER TABLE "PFASSOCS" ADD CONSTRAINT "PFASSOC_CK_1" UNIQUE ("PFSN", "RELNAME") ENABLE;
  ALTER TABLE "PFASSOCS" ADD CONSTRAINT "PFASSOCS_PK" PRIMARY KEY ("PFASSOCID") ENABLE;
  ALTER TABLE "PFASSOCS" ADD CONSTRAINT "PFASSOCS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "PFASSOCS" MODIFY ("PFASSOCID" NOT NULL ENABLE);

--  Constraints for Table PRODUCTFAMILIES
  ALTER TABLE "PRODUCTFAMILIES" ADD CONSTRAINT "PRODUCTFAMILIES_PK" PRIMARY KEY ("PFSN") ENABLE;
  ALTER TABLE "PRODUCTFAMILIES" ADD CONSTRAINT "PRODUCTFAMILIES_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "PRODUCTFAMILIES" MODIFY ("PFSN" NOT NULL ENABLE);

--  Constraints for Table PRODUCTS
  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_PK" PRIMARY KEY ("PSN") ENABLE;
  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "PRODUCTS" MODIFY ("PSN" NOT NULL ENABLE);

--  Constraints for Table PS_TXN
  ALTER TABLE "PS_TXN" ADD CONSTRAINT "PS_TXN_PK" PRIMARY KEY ("COLLID", "ID") ENABLE;

--  Constraints for Table RELEASES
  ALTER TABLE "RELEASES" ADD CONSTRAINT "RELEASES_PK" PRIMARY KEY ("RELNAME") ENABLE;
  ALTER TABLE "RELEASES" MODIFY ("RELNAME" NOT NULL ENABLE);

--  Constraints for Table ROLEACTIONS
  ALTER TABLE "ROLEACTIONS" ADD CONSTRAINT "ROLEACTIONS_PK" PRIMARY KEY ("ACTIONID") ENABLE;
  ALTER TABLE "ROLEACTIONS" MODIFY ("ACTIONS" NOT NULL ENABLE);
  ALTER TABLE "ROLEACTIONS" MODIFY ("ACTIONID" NOT NULL ENABLE);

--  Constraints for Table ROLES
  ALTER TABLE "ROLES" ADD CONSTRAINT "ROLES_PK" PRIMARY KEY ("ROLE") ENABLE;
  ALTER TABLE "ROLES" ADD CONSTRAINT "ROLES_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "ROLES" MODIFY ("ROLE" NOT NULL ENABLE);

--  Constraints for Table RULES
  ALTER TABLE "RULES" ADD CONSTRAINT "RULES_PK" PRIMARY KEY ("RULEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS  ENABLE;

--  Constraints for Table SETTINGS
  ALTER TABLE "SETTINGS" ADD CONSTRAINT "SETTINGS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table SETUPHISTORY
  ALTER TABLE "SETUPHISTORY" ADD CONSTRAINT "SETUPHISTORY_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "SETUPHISTORY" ADD CONSTRAINT "SETUPHISTORY_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table STATUS
  ALTER TABLE "STATUS" ADD CONSTRAINT "STATUS_PK" PRIMARY KEY ("ID") ENABLE;

--  Constraints for Table USERHISTORY
  ALTER TABLE "USERHISTORY" ADD CONSTRAINT "USERHISTORY_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "USERHISTORY" ADD CONSTRAINT "USERHISTORY_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;

--  Constraints for Table USERROLES
  ALTER TABLE "USERROLES" ADD CONSTRAINT "USERROLES_PK" PRIMARY KEY ("RECID") ENABLE;
  ALTER TABLE "USERROLES" ADD CONSTRAINT "USERROLES_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "USERROLES" MODIFY ("RECID" NOT NULL ENABLE);

--  Constraints for Table USERS
  ALTER TABLE "USERS" ADD CONSTRAINT "USERNAME_PK" PRIMARY KEY ("USERNAME") ENABLE;
  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_CHECK_DELETED" CHECK (DELETED=1 OR DELETED=0) ENABLE;
  ALTER TABLE "USERS" MODIFY ("USERNAME" NOT NULL ENABLE);

--  Constraints for Table USERSETTINGS
  ALTER TABLE "USERSETTINGS" ADD CONSTRAINT "USERSETTINGS_PK" PRIMARY KEY ("SETTINGID") ENABLE;
  ALTER TABLE "USERSETTINGS" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "USERSETTINGS" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "USERSETTINGS" MODIFY ("SETTINGID" NOT NULL ENABLE);

--  Ref Constraints for Table COMPONENTCODE
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_FK" FOREIGN KEY ("COMPID")
	  REFERENCES "COMPONENTS" ("COMPID") ENABLE;
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_FK2" FOREIGN KEY ("KEYID")
	  REFERENCES "KEYWORDS" ("KEYID") ENABLE;
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_FK3" FOREIGN KEY ("OBJID")
	  REFERENCES "OBJECTTYPES" ("OBJID") ENABLE;
  ALTER TABLE "COMPONENTCODE" ADD CONSTRAINT "COMPONENTCODE_FK4" FOREIGN KEY ("FUNCID")
	  REFERENCES "FUNCTIONS" ("FUNCID") ENABLE;

--  Ref Constraints for Table COMPONENTHISTORY
  ALTER TABLE "COMPONENTHISTORY" ADD CONSTRAINT "COMPONENTHISTORY_FK_1" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "COMPONENTHISTORY" ADD CONSTRAINT "COMPONENTHISTORY_FK_2" FOREIGN KEY ("COMPID")
	  REFERENCES "COMPONENTS" ("COMPID") DISABLE;
  ALTER TABLE "COMPONENTHISTORY" ADD CONSTRAINT "COMPONENTHISTORY_FK_3" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table COMPONENTS
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_FK_1" FOREIGN KEY ("FETASSOCID")
	  REFERENCES "FETASSOCS" ("FETASSOCID") ENABLE;
  ALTER TABLE "COMPONENTS" ADD CONSTRAINT "COMPONENTS_LOCKEDBY_FKEY_CON" FOREIGN KEY ("LOCKEDBY")
	  REFERENCES "USERS" ("USERNAME") ENABLE;

--  Ref Constraints for Table COMPONENTSETHISTORY
  ALTER TABLE "COMPONENTSETHISTORY" ADD CONSTRAINT "COMPONENTSETHISTORY_FK_1" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "COMPONENTSETHISTORY" ADD CONSTRAINT "COMPONENTSETHISTORY_FK_2" FOREIGN KEY ("COMPSETID")
	  REFERENCES "COMPONENTSETS" ("COMPSETID") DISABLE;
  ALTER TABLE "COMPONENTSETHISTORY" ADD CONSTRAINT "COMPONENTSETHISTORY_FK_3" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table COMPONENTSETS
  ALTER TABLE "COMPONENTSETS" ADD CONSTRAINT "COMPONENTSETS_FK_1" FOREIGN KEY ("FETASSOCID")
	  REFERENCES "FETASSOCS" ("FETASSOCID") ENABLE;

--  Ref Constraints for Table COMPSETRECORDS
  ALTER TABLE "COMPSETRECORDS" ADD CONSTRAINT "COMPSETRECORDS_FK" FOREIGN KEY ("COMPSETID")
	  REFERENCES "COMPONENTSETS" ("COMPSETID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "COMPSETRECORDS" ADD CONSTRAINT "CSR_FK2" FOREIGN KEY ("PARCOMPSETRECID")
	  REFERENCES "COMPSETRECORDS" ("COMPSETRECID") ENABLE;

--  Ref Constraints for Table COMPUSEDFLOWSLOCKEDUSERS
  ALTER TABLE "COMPUSEDFLOWSLOCKEDUSERS" ADD CONSTRAINT "COMPUSEDFLOWSLOCKEDUSERS__FK1" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") ENABLE;
  ALTER TABLE "COMPUSEDFLOWSLOCKEDUSERS" ADD CONSTRAINT "COMPUSEDFLOWSLOCKEDUSERS__FK2" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "COMPUSEDFLOWSLOCKEDUSERS" ADD CONSTRAINT "COMPUSEDFLOWSLOCKEDUSERS__FK3" FOREIGN KEY ("COMPID")
	  REFERENCES "COMPONENTS" ("COMPID") ENABLE;

--  Ref Constraints for Table FAVOURITECOMPONENTS
  ALTER TABLE "FAVOURITECOMPONENTS" ADD CONSTRAINT "FAVOURITECOMPONENTS_FK" FOREIGN KEY ("COMPID")
	  REFERENCES "COMPONENTS" ("COMPID") ENABLE;
  ALTER TABLE "FAVOURITECOMPONENTS" ADD CONSTRAINT "FAVOURITECOMPONENTS_FK2" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;

--  Ref Constraints for Table FEATURES
  ALTER TABLE "FEATURES" ADD CONSTRAINT "FEATURES_PRODUCTS_FK" FOREIGN KEY ("PSN")
	  REFERENCES "PRODUCTS" ("PSN") ENABLE;

--  Ref Constraints for Table FETASSOCS
  ALTER TABLE "FETASSOCS" ADD CONSTRAINT "FETASSOCS_FK" FOREIGN KEY ("FETSN")
	  REFERENCES "FEATURES" ("FETSN") ENABLE;
  ALTER TABLE "FETASSOCS" ADD CONSTRAINT "FETASSOCS_PASSOCID" FOREIGN KEY ("PASSOCID")
	  REFERENCES "PASSOCS" ("PASSOCID") ON DELETE CASCADE ENABLE;

--  Ref Constraints for Table FLOWATTACHMENTS
  ALTER TABLE "FLOWATTACHMENTS" ADD CONSTRAINT "FLOWATTACHMENTS_FK" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") ENABLE;

--  Ref Constraints for Table FLOWHISTORY
  ALTER TABLE "FLOWHISTORY" ADD CONSTRAINT "FLOWHISTORY_FK_1" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "FLOWHISTORY" ADD CONSTRAINT "FLOWHISTORY_FK_2" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") DISABLE;
  ALTER TABLE "FLOWHISTORY" ADD CONSTRAINT "FLOWHISTORY_FK_3" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table FLOWS
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_FTYPE_FK" FOREIGN KEY ("FTYPE")
	  REFERENCES "FLOWTYPES" ("FTYPE") ENABLE;
  ALTER TABLE "FLOWS" ADD CONSTRAINT "FLOWS_PASSOCID_FK" FOREIGN KEY ("PASSOCID")
	  REFERENCES "PASSOCS" ("PASSOCID") ENABLE;

--  Ref Constraints for Table FLOWSTRUCTUREBLOCKS
  ALTER TABLE "FLOWSTRUCTUREBLOCKS" ADD CONSTRAINT "FSB_FK1" FOREIGN KEY ("PARBLOCKID")
	  REFERENCES "FLOWSTRUCTUREBLOCKS" ("FLOWBLOCKID") ENABLE;
  ALTER TABLE "FLOWSTRUCTUREBLOCKS" ADD CONSTRAINT "FSB_FK2" FOREIGN KEY ("FLOWSCRIPTID")
	  REFERENCES "FLOWSTRUCTURESCRIPTS" ("FLOWSCRIPTID") ENABLE;

--  Ref Constraints for Table FLOWSTRUCTURESCRIPTS
  ALTER TABLE "FLOWSTRUCTURESCRIPTS" ADD CONSTRAINT "FLOWSTRUCTURESCRIPTS_FK" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") ENABLE;

--  Ref Constraints for Table FLOWTESTDATA
  ALTER TABLE "FLOWTESTDATA" ADD CONSTRAINT "FTD_FK1" FOREIGN KEY ("FLOWBLOCKID")
	  REFERENCES "FLOWSTRUCTUREBLOCKS" ("FLOWBLOCKID") ENABLE;
  ALTER TABLE "FLOWTESTDATA" ADD CONSTRAINT "FTD_FK2" FOREIGN KEY ("COMPID")
	  REFERENCES "COMPONENTS" ("COMPID") ENABLE;
  ALTER TABLE "FLOWTESTDATA" ADD CONSTRAINT "FTD_FK3" FOREIGN KEY ("LINEID")
	  REFERENCES "COMPONENTCODE" ("LINEID") ENABLE;
  ALTER TABLE "FLOWTESTDATA" ADD CONSTRAINT "FTD_FK4" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") ENABLE;

--  Ref Constraints for Table FLOWVARS
  ALTER TABLE "FLOWVARS" ADD CONSTRAINT "FV_FK1" FOREIGN KEY ("FLOWBLOCKID")
	  REFERENCES "FLOWSTRUCTUREBLOCKS" ("FLOWBLOCKID") ENABLE;
  ALTER TABLE "FLOWVARS" ADD CONSTRAINT "FV_FK2" FOREIGN KEY ("FLOWID")
	  REFERENCES "FLOWS" ("FLOWID") ENABLE;

--  Ref Constraints for Table FUNCTIONS
  ALTER TABLE "FUNCTIONS" ADD CONSTRAINT "FUNCTIONS_FK" FOREIGN KEY ("OBJID")
	  REFERENCES "OBJECTTYPES" ("OBJID") ENABLE;

--  Ref Constraints for Table NOTIFICATIONS
  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "NOTIFICATIONS_FK" FOREIGN KEY ("FROMUSER")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "NOTIFICATIONS_FK2" FOREIGN KEY ("TOUSER")
	  REFERENCES "USERS" ("USERNAME") ON DELETE CASCADE ENABLE;

--  Ref Constraints for Table OBJECTTYPES
  ALTER TABLE "OBJECTTYPES" ADD CONSTRAINT "OBJECTTYPES_FK" FOREIGN KEY ("KEYID")
	  REFERENCES "KEYWORDS" ("KEYID") ENABLE;

--  Ref Constraints for Table PASSOCS
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOCS_PFASSOCSID" FOREIGN KEY ("PFASSOCSID")
	  REFERENCES "PFASSOCS" ("PFASSOCID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOC_FK_1" FOREIGN KEY ("PSN")
	  REFERENCES "PRODUCTS" ("PSN") ENABLE;
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOC_FK_2" FOREIGN KEY ("PFSN")
	  REFERENCES "PRODUCTFAMILIES" ("PFSN") ENABLE;
  ALTER TABLE "PASSOCS" ADD CONSTRAINT "PASSOC_FK_3" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table PFASSOCS
  ALTER TABLE "PFASSOCS" ADD CONSTRAINT "PFASSOC_FK_1" FOREIGN KEY ("PFSN")
	  REFERENCES "PRODUCTFAMILIES" ("PFSN") ENABLE;
  ALTER TABLE "PFASSOCS" ADD CONSTRAINT "PFASSOC_FK_2" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table PRODUCTS
  ALTER TABLE "PRODUCTS" ADD CONSTRAINT "PRODUCTS_PF_FK" FOREIGN KEY ("PFSN")
	  REFERENCES "PRODUCTFAMILIES" ("PFSN") ENABLE;

--  Ref Constraints for Table RULES
  ALTER TABLE "RULES" ADD CONSTRAINT "RULES_FK" FOREIGN KEY ("KEYID")
	  REFERENCES "KEYWORDS" ("KEYID") ENABLE;
  ALTER TABLE "RULES" ADD CONSTRAINT "RULES_FK2" FOREIGN KEY ("OBJID")
	  REFERENCES "OBJECTTYPES" ("OBJID") ENABLE;

--  Ref Constraints for Table SETUPHISTORY
  ALTER TABLE "SETUPHISTORY" ADD CONSTRAINT "SETUPHISTORY_FK" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "SETUPHISTORY" ADD CONSTRAINT "SETUPHISTORY_FK2" FOREIGN KEY ("RELNAME")
	  REFERENCES "RELEASES" ("RELNAME") ENABLE;

--  Ref Constraints for Table USERROLES
  ALTER TABLE "USERROLES" ADD CONSTRAINT "USERROLES" FOREIGN KEY ("USERNAME")
	  REFERENCES "USERS" ("USERNAME") ENABLE;
  ALTER TABLE "USERROLES" ADD CONSTRAINT "USERROLES_FK_2" FOREIGN KEY ("ROLE")
	  REFERENCES "ROLES" ("ROLE") ENABLE;
  ALTER TABLE "USERROLES" ADD CONSTRAINT "USERROLES_FK_3" FOREIGN KEY ("PFSN")
	  REFERENCES "PRODUCTFAMILIES" ("PFSN") ENABLE;

--  Ref Constraints for Table USERS
  ALTER TABLE "USERS" ADD CONSTRAINT "USERNAME_FK_1" FOREIGN KEY ("MGR")
	  REFERENCES "USERS" ("USERNAME") ENABLE;


--  DDL for Type BLOCKSTABLE
  CREATE OR REPLACE TYPE "BLOCKSTABLE" as table of flowBlockRow;

/

--  DDL for Type FLOWBLOCKROW
  CREATE OR REPLACE TYPE "FLOWBLOCKROW" as object
(
    flowblockid Number(11),
    parblockid Number(11),
    id varchar2(11),
    blocktype varchar2(20),
    rowordervalue Number(20,10),
    comments varchar2(500),
    flowscriptid Number,
    version Number
);

/

--  DDL for Sequence ACTIONS_SEQ
   CREATE SEQUENCE  "ACTIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTCODE_SEQ
   CREATE SEQUENCE  "COMPONENTCODE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTHISTORY_SEQ
   CREATE SEQUENCE  "COMPONENTHISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTSETHISTORY_SEQ
   CREATE SEQUENCE  "COMPONENTSETHISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTSETSRECORDS_SEQ
   CREATE SEQUENCE  "COMPONENTSETSRECORDS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTSETS_SEQ
   CREATE SEQUENCE  "COMPONENTSETS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPONENTS_SEQ
   CREATE SEQUENCE  "COMPONENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence COMPUSEDFLOWSLOCKEDUSERS_SEQ
   CREATE SEQUENCE  "COMPUSEDFLOWSLOCKEDUSERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence DBOBJECTID_SEQUENCE
   CREATE SEQUENCE  "DBOBJECTID_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 50 START WITH 1 CACHE 50 NOORDER  NOCYCLE ;

--  DDL for Sequence FAVOURITECOMPONENTS_SEQ
   CREATE SEQUENCE  "FAVOURITECOMPONENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FEATURES_SEQ
   CREATE SEQUENCE  "FEATURES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FETASSOCS_SEQ
   CREATE SEQUENCE  "FETASSOCS_SEQ"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWATTACHMENTS_SEQ
   CREATE SEQUENCE  "FLOWATTACHMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWCOMPONENTS_SEQ
   CREATE SEQUENCE  "FLOWCOMPONENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWHISTORY_SEQ
   CREATE SEQUENCE  "FLOWHISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSCRIPTASSOC_SEQ
   CREATE SEQUENCE  "FLOWSCRIPTASSOC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSTRUCTUREBLOCKS_SEQ1
   CREATE SEQUENCE  "FLOWSTRUCTUREBLOCKS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSTRUCTURECOMPONENTS_SEQ
   CREATE SEQUENCE  "FLOWSTRUCTURECOMPONENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSTRUCTUREENTITIESS_SEQ
   CREATE SEQUENCE  "FLOWSTRUCTUREENTITIESS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSTRUCTURESCRIPTS_SEQ
   CREATE SEQUENCE  "FLOWSTRUCTURESCRIPTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWSTRUCTURESCRIPTS_SEQ1
   CREATE SEQUENCE  "FLOWSTRUCTURESCRIPTS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWS_SEQ
   CREATE SEQUENCE  "FLOWS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWTESTDATA_SEQ
   CREATE SEQUENCE  "FLOWTESTDATA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWTYPES_SEQ
   CREATE SEQUENCE  "FLOWTYPES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FLOWVARS_SEQ
   CREATE SEQUENCE  "FLOWVARS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence FUNCTIONS_SEQ
   CREATE SEQUENCE  "FUNCTIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence KEYWORDS_SEQ
   CREATE SEQUENCE  "KEYWORDS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence MESSAGES_SEQ
   CREATE SEQUENCE  "MESSAGES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence NOTIFICATIONS_SEQ
   CREATE SEQUENCE  "NOTIFICATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence OBJECTTYPES_SEQ
   CREATE SEQUENCE  "OBJECTTYPES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence PASSOCS_SEQ
   CREATE SEQUENCE  "PASSOCS_SEQ"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence PFASSOCS_SEQ
   CREATE SEQUENCE  "PFASSOCS_SEQ"  MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence PRODUCTFAMILIES_SEQ
   CREATE SEQUENCE  "PRODUCTFAMILIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence PRODUCTS_SEQ
   CREATE SEQUENCE  "PRODUCTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence PS_TXN_SEQ
   CREATE SEQUENCE  "PS_TXN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 50 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence ROLES_SEQ
   CREATE SEQUENCE  "ROLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence RULES_SEQ
   CREATE SEQUENCE  "RULES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence SCRIPTCOMPASSOC_SEQ
   CREATE SEQUENCE  "SCRIPTCOMPASSOC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence SETTINGS_SEQ
   CREATE SEQUENCE  "SETTINGS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence SETUPHISTORY_SEQ
   CREATE SEQUENCE  "SETUPHISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence STATUS_SEQ
   CREATE SEQUENCE  "STATUS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence USERHISTORY_SEQ
   CREATE SEQUENCE  "USERHISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence USERROLES_SEQ
   CREATE SEQUENCE  "USERROLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100000000 CACHE 20 NOORDER  NOCYCLE ;

--  DDL for Sequence USERSETTINGS_SEQUENCE
   CREATE SEQUENCE  "USERSETTINGS_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5000 CACHE 20 NOORDER  NOCYCLE ;


--  DDL for Trigger BI_COMPONENTCODE
  CREATE OR REPLACE TRIGGER "BI_COMPONENTCODE" 
  before insert on "COMPONENTCODE"              
  for each row 
begin  
  if :NEW."LINEID" is null then
    select "COMPONENTCODE_SEQ".nextval into :NEW."LINEID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTCODE" ENABLE;

--  DDL for Trigger BI_COMPONENTHISTORY
  CREATE OR REPLACE TRIGGER "BI_COMPONENTHISTORY" 
  before insert on "COMPONENTHISTORY"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "COMPONENTHISTORY_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTHISTORY" ENABLE;

--  DDL for Trigger BI_COMPONENTS
  CREATE OR REPLACE TRIGGER "BI_COMPONENTS" 
  before insert on "COMPONENTS"              
  for each row 
begin  
  if :NEW."COMPID" is null then
    select "COMPONENTS_SEQ".nextval into :NEW."COMPID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTS" ENABLE;

--  DDL for Trigger BI_COMPONENTSETHISTORY
  CREATE OR REPLACE TRIGGER "BI_COMPONENTSETHISTORY" 
  before insert on "COMPONENTSETHISTORY"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "COMPONENTSETHISTORY_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTSETHISTORY" ENABLE;

--  DDL for Trigger BI_COMPONENTSETS
  CREATE OR REPLACE TRIGGER "BI_COMPONENTSETS" 
  before insert on "COMPONENTSETS"              
  for each row 
begin  
  if :NEW."COMPSETID" is null then
    select "COMPONENTSETS_SEQ".nextval into :NEW."COMPSETID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTSETS" ENABLE;

--  DDL for Trigger BI_COMPONENTSETSRECORDS
  CREATE OR REPLACE TRIGGER "BI_COMPONENTSETSRECORDS" 
  before insert on "COMPSETRECORDS"              
  for each row 
begin  
  if :NEW."COMPSETRECID" is null then
    select "COMPONENTSETSRECORDS_SEQ".nextval into :NEW."COMPSETRECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_COMPONENTSETSRECORDS" ENABLE;

--  DDL for Trigger BI_COMPUSEDFLOWSLOCKEDUSERS
  CREATE OR REPLACE TRIGGER "BI_COMPUSEDFLOWSLOCKEDUSERS" before
  INSERT ON COMPUSEDFLOWSLOCKEDUSERS FOR EACH row BEGIN IF :NEW.Flowslockedrecid IS NULL THEN
  SELECT COMPUSEDFLOWSLOCKEDUSERS_SEQ .nextval
  INTO :NEW.Flowslockedrecid
  FROM dual;
END IF;
END;

/
ALTER TRIGGER "BI_COMPUSEDFLOWSLOCKEDUSERS" ENABLE;

--  DDL for Trigger BI_FAVOURITECOMPONENTS
  CREATE OR REPLACE TRIGGER "BI_FAVOURITECOMPONENTS" 
  before insert on "FAVOURITECOMPONENTS"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "FAVOURITECOMPONENTS_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FAVOURITECOMPONENTS" ENABLE;

--  DDL for Trigger BI_FEATURES
  CREATE OR REPLACE TRIGGER "BI_FEATURES" 
  before insert on "FEATURES"              
  for each row 
begin  
  if :NEW."FETSN" is null then
    select "FEATURES_SEQ".nextval into :NEW."FETSN" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FEATURES" ENABLE;

--  DDL for Trigger BI_FETASSOCS
  CREATE OR REPLACE TRIGGER "BI_FETASSOCS" 
  before insert on "FETASSOCS"              
  for each row 
begin  
  if :NEW."FETASSOCID" is null then
    select "FETASSOCS_SEQ".nextval into :NEW."FETASSOCID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FETASSOCS" ENABLE;

--  DDL for Trigger BI_FLOWATTACHMENTS
  CREATE OR REPLACE TRIGGER "BI_FLOWATTACHMENTS" 
  before insert on "FLOWATTACHMENTS"               
  for each row  
begin   
  if :NEW."ATTACHID" is null then 
    select "FLOWATTACHMENTS_SEQ".nextval into :NEW."ATTACHID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_FLOWATTACHMENTS" ENABLE;

--  DDL for Trigger BI_FLOWCOMPONENTS
  CREATE OR REPLACE TRIGGER "BI_FLOWCOMPONENTS" 
  before insert on "FLOWCOMPONENTS"              
  for each row 
begin  
  if :NEW."FLOWID" is null then
    select "FLOWCOMPONENTS_SEQ".nextval into :NEW."FLOWID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FLOWCOMPONENTS" ENABLE;

--  DDL for Trigger BI_FLOWHISTORY
  CREATE OR REPLACE TRIGGER "BI_FLOWHISTORY" 
  before insert on "FLOWHISTORY"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "FLOWHISTORY_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FLOWHISTORY" ENABLE;

--  DDL for Trigger BI_FLOWS
  CREATE OR REPLACE TRIGGER "BI_FLOWS" 
  before insert on "FLOWS"              
  for each row 
begin  
  if :NEW."FLOWID" is null then
    select "FLOWS_SEQ".nextval into :NEW."FLOWID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FLOWS" ENABLE;

--  DDL for Trigger BI_FLOWSTRUCTUREBLOCKS
  CREATE OR REPLACE TRIGGER "BI_FLOWSTRUCTUREBLOCKS" 
  before insert on "FLOWSTRUCTUREBLOCKS"              
  for each row 
begin  
  if :NEW."FLOWBLOCKID" is null then
    select "FLOWSTRUCTUREBLOCKS_SEQ1".nextval into :NEW."FLOWBLOCKID" from dual;    
  end if;
end;

/
ALTER TRIGGER "BI_FLOWSTRUCTUREBLOCKS" ENABLE;

--  DDL for Trigger BI_FLOWSTRUCTURESCRIPTS
  CREATE OR REPLACE TRIGGER "BI_FLOWSTRUCTURESCRIPTS" 
  before insert on "FLOWSTRUCTURESCRIPTS"              
  for each row 
begin  
  if :NEW."FLOWSCRIPTID" is null then
    select "FLOWSTRUCTURESCRIPTS_SEQ1".nextval into :NEW."FLOWSCRIPTID" from dual;    
  end if;
end;

/
ALTER TRIGGER "BI_FLOWSTRUCTURESCRIPTS" ENABLE;

--  DDL for Trigger BI_FLOWTESTDATA
  CREATE OR REPLACE TRIGGER "BI_FLOWTESTDATA" 
  before insert on "FLOWTESTDATA"              
  for each row 
begin  
  if :NEW."FLOWTESTDATAID" is null then
    select "FLOWTESTDATA_SEQ".nextval into :NEW."FLOWTESTDATAID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FLOWTESTDATA" ENABLE;

--  DDL for Trigger BI_FLOWVARS
  CREATE OR REPLACE TRIGGER "BI_FLOWVARS" 
  before insert on "FLOWVARS"              
  for each row 
begin  
  if :NEW."FLOWVARID" is null then
    select "FLOWVARS_SEQ".nextval into :NEW."FLOWVARID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_FLOWVARS" ENABLE;

--  DDL for Trigger BI_FUNCTIONS
  CREATE OR REPLACE TRIGGER "BI_FUNCTIONS" 
  before insert on "FUNCTIONS"               
  for each row  
begin   
  if :NEW."FUNCID" is null then 
    select "FUNCTIONS_SEQ".nextval into :NEW."FUNCID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_FUNCTIONS" ENABLE;

--  DDL for Trigger BI_KEYWORDS
  CREATE OR REPLACE TRIGGER "BI_KEYWORDS" 
  before insert on "KEYWORDS"               
  for each row  
begin   
  if :NEW."KEYID" is null then 
    select "KEYWORDS_SEQ".nextval into :NEW."KEYID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_KEYWORDS" ENABLE;

--  DDL for Trigger BI_MESSAGES
  CREATE OR REPLACE TRIGGER "BI_MESSAGES" 
  before insert on "MESSAGES"              
  for each row 
begin  
  if :NEW."CODE" is null then
    select "MESSAGES_SEQ".nextval into :NEW."CODE" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_MESSAGES" ENABLE;

--  DDL for Trigger BI_NOTIFICATIONS
  CREATE OR REPLACE TRIGGER "BI_NOTIFICATIONS" 
  before insert on "NOTIFICATIONS"              
  for each row 
begin  
  if :NEW."NOTIFICATIONID" is null then
    select "NOTIFICATIONS_SEQ".nextval into :NEW."NOTIFICATIONID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_NOTIFICATIONS" ENABLE;

--  DDL for Trigger BI_OBJECTTYPES
  CREATE OR REPLACE TRIGGER "BI_OBJECTTYPES" 
  before insert on "OBJECTTYPES"               
  for each row  
begin   
  if :NEW."OBJID" is null then 
    select "OBJECTTYPES_SEQ".nextval into :NEW."OBJID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_OBJECTTYPES" ENABLE;

--  DDL for Trigger BI_PASSOCS
  CREATE OR REPLACE TRIGGER "BI_PASSOCS" 
  before insert on "PASSOCS"              
  for each row 
begin  
  if :NEW."PASSOCID" is null then
    select "PASSOCS_SEQ".nextval into :NEW."PASSOCID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_PASSOCS" ENABLE;

--  DDL for Trigger BI_PFASSOCS
  CREATE OR REPLACE TRIGGER "BI_PFASSOCS" 
  before insert on "PFASSOCS"              
  for each row 
begin  
  if :NEW."PFASSOCID" is null then
    select "PFASSOCS_SEQ".nextval into :NEW."PFASSOCID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_PFASSOCS" ENABLE;

--  DDL for Trigger BI_PRODUCTFAMILIES
  CREATE OR REPLACE TRIGGER "BI_PRODUCTFAMILIES" 
  before insert on "PRODUCTFAMILIES"              
  for each row 
begin  
  if :NEW."PFSN" is null then
    select "PRODUCTFAMILIES_SEQ".nextval into :NEW."PFSN" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_PRODUCTFAMILIES" ENABLE;

--  DDL for Trigger BI_PRODUCTS
  CREATE OR REPLACE TRIGGER "BI_PRODUCTS" 
  before insert on "PRODUCTS"              
  for each row 
begin  
  if :NEW."PSN" is null then
    select "PRODUCTS_SEQ".nextval into :NEW."PSN" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_PRODUCTS" ENABLE;

--  DDL for Trigger BI_ROLES
  CREATE OR REPLACE TRIGGER "BI_ROLES" 
  before insert on "ROLES"              
  for each row 
begin  
  if :NEW."ROLE" is null then
    select "ROLES_SEQ".nextval into :NEW."ROLE" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_ROLES" ENABLE;

--  DDL for Trigger BI_RULES
  CREATE OR REPLACE TRIGGER "BI_RULES" 
  before insert on "RULES"               
  for each row  
begin   
  if :NEW."RULEID" is null then 
    select "RULES_SEQ".nextval into :NEW."RULEID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_RULES" ENABLE;

--  DDL for Trigger BI_SETUPHISTORY
  CREATE OR REPLACE TRIGGER "BI_SETUPHISTORY" 
  before insert on "SETUPHISTORY"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "SETUPHISTORY_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_SETUPHISTORY" ENABLE;

--  DDL for Trigger BI_STATUS
  CREATE OR REPLACE TRIGGER "BI_STATUS" 
  before insert on "STATUS"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "STATUS_SEQ".nextval into :NEW."ID" from dual; 
  end if; 
end; 

/
ALTER TRIGGER "BI_STATUS" ENABLE;

--  DDL for Trigger BI_USERHISTORY
  CREATE OR REPLACE TRIGGER "BI_USERHISTORY" 
  before insert on "USERHISTORY"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "USERHISTORY_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_USERHISTORY" ENABLE;

--  DDL for Trigger BI_USERROLES
  CREATE OR REPLACE TRIGGER "BI_USERROLES" 
  before insert on "USERROLES"              
  for each row 
begin  
  if :NEW."RECID" is null then
    select "USERROLES_SEQ".nextval into :NEW."RECID" from dual;
  end if;
end;

/
ALTER TRIGGER "BI_USERROLES" ENABLE;

--  DDL for Trigger USERSETTINGS_TRIGEER
  CREATE OR REPLACE TRIGGER "USERSETTINGS_TRIGEER" 
  before insert on "USERSETTINGS"              
  for each row 
begin  
  if :NEW."SETTINGID" is null then
    select "SETTINGS_SEQ".nextval into :NEW."SETTINGID" from dual;
  end if;
end;

/
ALTER TRIGGER "USERSETTINGS_TRIGEER" ENABLE;


--  DDL for Function GETFLOWBLOCKS
  CREATE OR REPLACE FUNCTION "GETFLOWBLOCKS" (iFlowId Number) return blocksTable
PIPELINED 
as
iC Number := 0;
childs blocksTable;
begin    
    for rec in (select * from flowstructureblocks where flowscriptid in (select flowscriptid from flowstructurescripts where flowid=iflowid) order by flowscriptid,rowordervalue) loop
       -- insert irrespective of C or CS
       pipe row(new flowBlockRow(rec.flowblockid,rec.parblockid,rec.id,rec.blocktype,rec.rowordervalue,rec.comments,rec.flowscriptid,rec.version));  
       -- if CS try to get the childs recursively. 
       if rec.blocktype ='CS' then
        iC:=iC+1;                 
         select flowBlockRow(flowblockid ,parblockid ,id , blocktype ,rowordervalue , comments , flowscriptid , version) bulk collect into childs from table(getRecFlowBlocks(rec.flowblockid)) ;
         dbms_output.put_line('Child Count:' || childs.COUNT);
         if childs.COUNT <> 0          
        then
            for childrec in childs.FIRST .. childs.LAST loop
                -- dbms_output.put_line('test');
                pipe row(new flowBlockRow(childs(childrec).flowblockid,childs(childrec).parblockid,childs(childrec).id,childs(childrec).blocktype,childs(childrec).rowordervalue,childs(childrec).comments,childs(childrec).flowscriptid,childs(childrec).version));      
            end loop;
         end if;
       end if; 
    end loop;        
    return;
end;

/


--  DDL for Function GETLATESTUSERNAME
  CREATE OR REPLACE FUNCTION "GETLATESTUSERNAME" ( p_FLOWID IN NUMBER ) RETURN VARCHAR2 AS 
V_userName VARCHAR2(200);
V_userFullName VARCHAR2(200);
BEGIN
select username into V_userName from ( select username from flowhistory fh where fh.flowid=p_FLOWID order by performedat desc) where rownum<=1;
select fullname into V_userFullName from users  where username=V_userName;
  RETURN V_userFullName;
END GETLATESTUSERNAME;

/


--  DDL for Function GETRECFLOWBLOCKS
  CREATE OR REPLACE FUNCTION "GETRECFLOWBLOCKS" (iBlockId Number)  return blocksTable
PIPELINED 
as
childs blocksTable;
begin 

    for rec in (select * from flowstructureblocks where parblockid=iBlockId) loop
        pipe row(new flowBlockRow(rec.flowblockid,rec.parblockid,rec.id,rec.blocktype,rec.rowordervalue,rec.comments,rec.flowscriptid,rec.version));  
        if rec.blocktype='CS' then
            --dbms_output.put_line('test');
            select flowBlockRow(flowblockid ,parblockid ,id , blocktype ,rowordervalue , comments , flowscriptid , version) bulk collect into childs from table(getRecFlowBlocks(rec.flowblockid)) ;
            if childs.COUNT<>0 then
                for childrec in childs.FIRST .. childs.LAST loop
                    pipe row(new flowBlockRow(childs(childrec).flowblockid,childs(childrec).parblockid,childs(childrec).id,childs(childrec).blocktype,childs(childrec).rowordervalue,childs(childrec).comments,childs(childrec).flowscriptid,childs(childrec).version));      
                end loop;
            end if;
        end if;
    end loop;
        
    return ;
end;

/


--  DDL for Function ISFLOWFOUND
  CREATE OR REPLACE FUNCTION "ISFLOWFOUND" (xflowid number,xfrom_passocid number,xto_passocid number) RETURN NUMBER IS
xflowname_len number;
xflowname flows.flowname%type;
ret number;
begin
select flowname into xflowname from flows where flowid=xflowid and passocid=xfrom_passocid;
select length(flowname) into xflowname_len from flows where flowname=xflowname and passocid=xto_passocid;
if xflowname_len =0 or xflowname_len =null then
    --dbms_output.put_line('Not found');
    ret:= 1;
 else 
    --dbms_output.put_line('Found');
    ret:= 0;
 end if;
return ret;
exception 
 when NO_DATA_FOUND THEN
  --dbms_output.put_line('No Data Found');
  return 1;
end isFlowFound;

/


--  DDL for Function MAINFUNC
  CREATE OR REPLACE FUNCTION "MAINFUNC" (pflowid number) RETURN NUMBER IS
compname1 varchar2(200);
approvecount1 number;
latestver1 number;
status1 varchar2(200);
k number;
begin
   for record1 in (select flowstructureblocks.id,flowstructureblocks.version,flowstructureblocks.flowblockid,flowstructureblocks.blocktype from flowstructureblocks, flowstructurescripts
where flowstructureblocks.flowscriptid = flowstructurescripts.flowscriptid and
flowstructureblocks.flowscriptid in(
SELECT flowstructurescripts.flowscriptid FROM flowstructurescripts, FLOWS
WHERE FLOWS.FLOWID = flowstructurescripts.FLOWID
AND FLOWS.FLOWID = pflowid) order by flowstructureblocks.rowordervalue)
   loop           
      if record1.blocktype = 'CS' then
        --dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype);     
        --dbms_output.put_line('<CompSet>');        
         k:=RecurFunc(record1.flowblockid);
        --dbms_output.put_line('</CompSet>');
     else
      select components.compname into compname1 from components where components.compid=record1.id;
      select components.approvecount into approvecount1 from components where components.compid=record1.id;
      select components.latestversion into latestver1 from components where components.compid=record1.id;
      select components.status into status1 from components where components.compid=record1.id;
      dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);
      if (approvecount1 < 1) or (status1<>'Approved' and latestver1 = record1.version ) then
          dbms_output.put_line('Un Approved Component Found');
           return 1;
        end if;
     end if;
   end loop;
   return 0;
end MainFunc;

/


--  DDL for Function RECURFUNC
  CREATE OR REPLACE FUNCTION "RECURFUNC" (fblockid number) RETURN NUMBER IS
compname1 varchar2(200);
approvecount1 number;
latestver1 number;
status1 varchar2(200);
k number;
begin
   for record1 in (select * from flowstructureblocks where flowstructureblocks.parblockid=fblockid order by flowstructureblocks.rowordervalue)
   loop           
      if record1.blocktype='CS' then  
         k:=RecurFunc(record1.parblockid);
      else
        select components.compname,components.approvecount,components.latestversion,components.status into compname1,approvecount1,latestver1,status1  from components where components.compid=record1.id;
        --select components.approvecount into approvecount1 from components where components.compid=record1.id;
        --select components.latestversion into latestver1 from components where components.compid=record1.id;
        --select components.status into status1 from components where components.compid=record1.id;
        dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);  
        if (approvecount1 < 1) or (status1<>'Approved' and latestver1 = record1.version ) then
          dbms_output.put_line('Un Approved Component Found');
            return 1;
        end if;
      end if;
   end loop;
   return 0;
end RecurFunc;

/


--  DDL for Function RECURPROC1
  CREATE OR REPLACE FUNCTION "RECURPROC1" (fblockid number) RETURN NUMBER IS
compname1 varchar2(200);
approvecount1 number;
latestver1 number;
status1 varchar2(200);
begin
   for record1 in (select * from flowstructureblocks where flowstructureblocks.parblockid=fblockid order by flowstructureblocks.rowordervalue)
   loop           
      if record1.blocktype='CS' then  
        RecurProc(record1.parblockid);
      else
        select components.compname into compname1 from components where components.compid=record1.id;
        select components.approvecount into approvecount1 from components where components.compid=record1.id;
        select components.latestversion into latestver1 from components where components.compid=record1.id;
        select components.status into status1 from components where components.compid=record1.id;
        dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);  
        if (approvecount1 < 1) or (status1='Approved' and latestver1 = record1.version ) then
          dbms_output.put_line('Un Approved Component Found');
            return 1;
        end if;
      end if;
   end loop;
   return 0;
end RecurProc1;

/


--  DDL for Procedure CREATECOMPSETHEIRARCHYset define off;
  CREATE OR REPLACE PROCEDURE "CREATECOMPSETHEIRARCHY" (oldFlowId number,newFlowId number,fblockid number,newFblockId number) IS
oldFlowBlockId flowstructureblocks.flowblockid%type;
newFlowBlockId flowstructureblocks.flowblockid%type;
seqVal number;
begin   
   for record1 in (select * from flowstructureblocks where parblockid=fblockid)
   loop       
		oldFlowBlockId:=record1.flowblockid;      
        dbms_output.put_line('>>'||record1.flowblockid||','||record1.parblockid);
        select FLOWSTRUCTUREBLOCKS_SEQ1.NEXTVAL into seqVal from dual;
            record1.flowblockid:=seqVal;            
            record1.parblockid:=newFblockId;
            newFlowBlockId:=seqVal;
            insert into flowstructureblocks values record1;     
         
        --Copying Flow Vars
        for newFlowVars in(select flowvarid,flowblockid,opvar,oincr,compid,lineid,roworder,flowid
          from flowvars where flowvars.flowid=oldFlowId and flowvars.flowblockid=oldFlowBlockId)
        loop
          newFlowVars.flowvarid:=null;
          newFlowVars.flowblockid:=newFlowBlockId;
          newFlowVars.flowId:=newFlowId;
          INSERT INTO flowvars values newFlowVars;        
        end loop;
        
        --Copying Flow Test Data
        for newFlowTestData in(select flowtestdataid,flowblockid,compid,lineid,roworder,testdata,flowid,flowtestdata.type,opincr
          from flowtestdata where flowtestdata.flowid=oldFlowId and flowtestdata.flowblockid=oldFlowBlockId)
        loop
          newFlowTestData.flowtestdataid:=null;
          newFlowTestData.flowblockid:=newFlowBlockId;
          newFlowTestData.flowId:=newFlowId;
          INSERT INTO flowtestdata values newFlowTestData;
        end loop;
        
        --Copying Flow Attachments
        for newFlowAttachments in(select * from flowattachments where flowid=oldFlowId)        
        loop
          newFlowAttachments.attachid:=null;
          newFlowAttachments.flowid:=newFlowId;
          insert into flowattachments values newFlowAttachments;
        end loop;
        
	  if record1.blocktype='CS' then  	     
         CreateCompSetHeirarchy(oldFlowId,newFlowId,oldFlowBlockId,newFlowBlockId);      
      end if;
   end loop;
end CreateCompSetHeirarchy;

/


--  DDL for Procedure FLOWCOPYset define off;
  CREATE OR REPLACE PROCEDURE "FLOWCOPY" (xflowid number,xfrom_passocid number,xto_passocid number,newFlowName varchar2) is
flowRec Flows%rowtype;
newFlowId Flows.flowid%type;

oldFlowScriptId flowstructurescripts.flowscriptid%type;
newFlowScriptId flowstructurescripts.flowscriptid%type;

oldFlowBlockId flowstructureblocks.flowblockid%type;
newFlowBlockId flowstructureblocks.flowblockid%type;
seqVal number;
i number;
xflowid1 number:=xflowid;
begin
 -- if  isFlowFound(xflowid,xfrom_passocid,xto_passocid)=0 then
 --   dbms_output.put_line('Error: Flow Already Found. Cannot Copy Given Flow.');    
 -- else
    dbms_output.put_line('New Flow Creating.');    
    select * into flowRec from flows where flowid=xflowid and passocid=xfrom_passocid;
    flowRec.flowid:=null;
    flowRec.flowname:=newFlowName;
    flowRec.passocid:=xto_passocid;    
    flowRec.status:='In Progress';
    flowRec.c_lock:=0;
    flowRec.lockedby:=null;
    --* Copying Flow
      insert into flows values flowRec; --NEED TO BE UNCOMMENED
    select flowid into newFlowId from flows where flowname=flowRec.flowname and passocid=flowRec.passocid; 
    --newFlowId:=1727; --For Testing
    dbms_output.put_line('New Flow ID: '||newFlowId);    
    
    --* Copying Scripts    
   for flowstructurescripts_rec in (select * from flowstructurescripts where flowid=xflowid)
   loop           
      oldFlowScriptId:=flowstructurescripts_rec.flowscriptid;
      flowstructurescripts_rec.flowscriptid:=null;
      flowstructurescripts_rec.flowid:=newFlowId;
      insert into flowstructurescripts values flowstructurescripts_rec; 
      select flowscriptid into newFlowScriptId from flowstructurescripts where flowid=newFlowId 
              and roworder in(select roworder from flowstructurescripts where flowid=xflowid and flowscriptid=oldFlowScriptId);
      dbms_output.put_line('New flow script id : '||newFlowScriptId );   
          --* Copying Flow Blocks (CS & C)
          for flowstructureblocks_rec in (select * from flowstructureblocks where flowscriptid=oldFlowScriptID)
          loop
            dbms_output.put_line('Flow Block id: '||flowstructureblocks_rec.flowblockid);               
            oldFlowBlockId:=flowstructureblocks_rec.flowblockid;
            select FLOWSTRUCTUREBLOCKS_SEQ1.NEXTVAL into seqVal from dual;
            flowstructureblocks_rec.flowblockid:=seqVal;
            newFlowBlockId:=seqVal;
            flowstructureblocks_rec.flowscriptid:=newFlowScriptId;
            insert into flowstructureblocks values flowstructureblocks_rec;
            
            --Copying Flow Vars        
            for newFlowVars in (select flowvarid,flowblockid,opvar,oincr,compid,lineid,roworder,flowid 
              from flowvars where flowvars.flowid=xflowid and flowvars.flowblockid=oldFlowBlockId)
            loop
              newFlowVars.flowvarid:=null;
              newFlowVars.flowblockid:=newFlowBlockId;
              newFlowVars.flowId:=newFlowId;
              INSERT INTO flowvars values newFlowVars;
            end loop;
            
        --Copying Flow Test Data
        for newFlowTestData in(select flowtestdataid,flowblockid,compid,lineid,roworder,testdata,flowid,flowtestdata.type,opincr
              from flowtestdata where flowtestdata.flowid=xflowid and flowtestdata.flowblockid=oldFlowBlockId)
        loop
          newFlowTestData.flowtestdataid:=null;
          newFlowTestData.flowblockid:=newFlowBlockId;
          newFlowTestData.flowId:=newFlowId;
          INSERT INTO flowtestdata values newFlowTestData;
        end loop;
        
        --Copying Flow Attachments
        --for newFlowAttachments in(select * from flowattachments where flowid=xflowid)        
        --loop
        --  newFlowAttachments.attachid:=null;
        --  newFlowAttachments.flowid:=newFlowId;
        --  insert into flowattachments values newFlowAttachments;
        --end loop;
        
              if flowstructureblocks_rec.blocktype='CS' then                
                dbms_output.put_line('*>'||oldFlowBlockId||','||newFlowBlockId);
                        dbms_output.put_line('=='||newFlowBlockId);
                 CreateCompSetHeirarchy(xflowid,newFlowId,oldFlowBlockId,newFlowBlockId);
              end if;
          end loop;
   end loop;
      --Copying Flow Attachments
        for newFlowAttachments in(select * from flowattachments where flowid=xflowid1)        
        loop
          newFlowAttachments.attachid:=null;
          newFlowAttachments.flowid:=newFlowId;
          insert into flowattachments values newFlowAttachments;
        end loop;
 -- end if;
 commit;
end FlowCopy;

/


--  DDL for Procedure MAINPROCset define off;
  CREATE OR REPLACE PROCEDURE "MAINPROC" (pflowid number) as
compname1 varchar2(200);
approvecount1 number;
latestver1 number;
status1 varchar2(200);
begin
   for record1 in (select flowstructureblocks.id,flowstructureblocks.version,flowstructureblocks.flowblockid,flowstructureblocks.blocktype from flowstructureblocks, flowstructurescripts
where flowstructureblocks.flowscriptid = flowstructurescripts.flowscriptid and
flowstructureblocks.flowscriptid in(
SELECT flowstructurescripts.flowscriptid FROM flowstructurescripts, FLOWS
WHERE FLOWS.FLOWID = flowstructurescripts.FLOWID
AND FLOWS.FLOWID = pflowid) order by flowstructureblocks.rowordervalue)
   loop           
      if record1.blocktype = 'CS' then
        --dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype);     
        --dbms_output.put_line('<CompSet>');        
        RecurProc(record1.flowblockid);
        --dbms_output.put_line('</CompSet>');
     else
      select components.compname into compname1 from components where components.compid=record1.id;
      select components.approvecount into approvecount1 from components where components.compid=record1.id;
      select components.latestversion into latestver1 from components where components.compid=record1.id;
      select components.status into status1 from components where components.compid=record1.id;
      dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);
      if (approvecount1 < 1) or (status1='Approved' and latestver1 = record1.version ) then
          dbms_output.put_line('Un Approved Component Found');
           exit;
        end if;
     end if;
   end loop;
end MainProc;

/


--  DDL for Procedure MAIN_PROCset define off;
  CREATE OR REPLACE PROCEDURE "MAIN_PROC" (FlowType VARCHAR2) IS
    CURSOR FlowList_CUR is (select * from Flows where ftype=FlowType);

BEGIN    
    FOR FlowList IN FlowList_CUR
    LOOP
      dbms_output.put_line(FlowList.FLOWNAME);
    END LOOP;    
END MAIN_PROC;

/



--  DDL for Procedure PROC1set define off;
  CREATE OR REPLACE PROCEDURE "PROC1" (fblockid number) as
compname1 varchar2(200);
approvecount1 number;
begin
   for record1 in (select * from flowstructureblocks where flowstructureblocks.parblockid=fblockid order by flowstructureblocks.parblockid)
   loop           
      if record1.blocktype='CS' then  
        proc1(record1.parblockid);
      else
        select components.compname into compname1 from components where components.compid=record1.id;
        select components.approvecount into approvecount1 from components where components.compid=record1.id;
        dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);  
        if approvecount1 < 1 then
          dbms_output.put_line('Un Approved Component Found');
           exit;
        end if;
      end if;
   end loop;
end proc1;

/


--  DDL for Procedure PROC2set define off;
  CREATE OR REPLACE PROCEDURE "PROC2" (pflowid number) as
compname1 varchar2(200);
approvecount1 number;
begin
   for record1 in (select flowstructureblocks.id,flowstructureblocks.version,flowstructureblocks.flowblockid,flowstructureblocks.blocktype from flowstructureblocks, flowstructurescripts
where flowstructureblocks.flowscriptid = flowstructurescripts.flowscriptid and
flowstructureblocks.flowscriptid in(
SELECT flowstructurescripts.flowscriptid FROM flowstructurescripts, FLOWS
WHERE FLOWS.FLOWID = flowstructurescripts.FLOWID
AND FLOWS.FLOWID = pflowid) order by flowstructureblocks.flowblockid)
   loop           
      if record1.blocktype = 'CS' then
        --dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype);     
        --dbms_output.put_line('<CompSet>');        
        proc1(record1.flowblockid);
        --dbms_output.put_line('</CompSet>');
     else
      select components.compname into compname1 from components where components.compid=record1.id;
      select components.approvecount into approvecount1 from components where components.compid=record1.id;
      dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);
      if approvecount1 < 1 then
          dbms_output.put_line('Un Approved Component Found');
           exit;
        end if;
     end if;
   end loop;
end proc2;

/


--  DDL for Procedure RECURPROCset define off;
  CREATE OR REPLACE PROCEDURE "RECURPROC" (fblockid number) as
compname1 varchar2(200);
approvecount1 number;
latestver1 number;
status1 varchar2(200);
begin
   for record1 in (select * from flowstructureblocks where flowstructureblocks.parblockid=fblockid order by flowstructureblocks.rowordervalue)
   loop           
      if record1.blocktype='CS' then  
        RecurProc(record1.parblockid);
      else
        select components.compname into compname1 from components where components.compid=record1.id;
        select components.approvecount into approvecount1 from components where components.compid=record1.id;
        select components.latestversion into latestver1 from components where components.compid=record1.id;
        select components.status into status1 from components where components.compid=record1.id;
        dbms_output.put_line(record1.id ||'  '|| record1.version ||'  '|| record1.flowblockid ||'  '|| record1.blocktype||'  '||compname1);  
        if (approvecount1 < 1) or (status1='Approved' and latestver1 = record1.version ) then
          dbms_output.put_line('Un Approved Component Found');
           exit;
        end if;
      end if;
   end loop;
end RecurProc;

/

--  DDL for Procedure TESTDATA1set define off;
  CREATE OR REPLACE PROCEDURE "TESTDATA1" 
IS

CURSOR testdata_cur IS
select * from flowtestdata where compid='7608';

testdata_rec testdata_cur%rowtype;

BEGIN
FOR testdata_rec in sales_rec
LOOP
dbms_output.put_line(testdata_cur.lineid);
END LOOP;
END;

/
